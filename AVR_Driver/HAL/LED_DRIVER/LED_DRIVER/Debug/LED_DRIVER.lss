
LED_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000040a  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000662  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020b  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f6  00000000  00000000  00001505  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000018fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000207  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ba  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  8a:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_void_Set_pin_dir>:
#include "MATH.h"
#include "DIO_Address.h"
#include "DIO_Interface.h"

void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin, u8 copy_u8_dir) {
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
  92:	68 30       	cpi	r22, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_void_Set_pin_dir+0x6>
  96:	81 c0       	rjmp	.+258    	; 0x19a <DIO_void_Set_pin_dir+0x108>
	{
		if (copy_u8_dir == OUTPUT)
  98:	41 30       	cpi	r20, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_void_Set_pin_dir+0xc>
  9c:	3e c0       	rjmp	.+124    	; 0x11a <DIO_void_Set_pin_dir+0x88>
		{
			switch (copy_u8_port)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	a9 f0       	breq	.+42     	; 0xcc <DIO_void_Set_pin_dir+0x3a>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	30 f0       	brcs	.+12     	; 0xb2 <DIO_void_Set_pin_dir+0x20>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	f1 f0       	breq	.+60     	; 0xe6 <DIO_void_Set_pin_dir+0x54>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_void_Set_pin_dir+0x1e>
  ae:	75 c0       	rjmp	.+234    	; 0x19a <DIO_void_Set_pin_dir+0x108>
  b0:	27 c0       	rjmp	.+78     	; 0x100 <DIO_void_Set_pin_dir+0x6e>
			{
				case PORTA: SET_BIT(DDRA_REG, copy_u8_pin); break;
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	ac 01       	movw	r20, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_void_Set_pin_dir+0x2e>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_void_Set_pin_dir+0x2a>
  c4:	ba 01       	movw	r22, r20
  c6:	62 2b       	or	r22, r18
  c8:	6a bb       	out	0x1a, r22	; 26
  ca:	08 95       	ret
				case PORTB: SET_BIT(DDRB_REG, copy_u8_pin); break;
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	ac 01       	movw	r20, r24
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_void_Set_pin_dir+0x48>
  d6:	44 0f       	add	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_void_Set_pin_dir+0x44>
  de:	ba 01       	movw	r22, r20
  e0:	62 2b       	or	r22, r18
  e2:	67 bb       	out	0x17, r22	; 23
  e4:	08 95       	ret
				case PORTC: SET_BIT(DDRC_REG, copy_u8_pin); break;
  e6:	24 b3       	in	r18, 0x14	; 20
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_void_Set_pin_dir+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_void_Set_pin_dir+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	64 bb       	out	0x14, r22	; 20
  fe:	08 95       	ret
				case PORTD: SET_BIT(DDRD_REG, copy_u8_pin); break;
 100:	21 b3       	in	r18, 0x11	; 17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_void_Set_pin_dir+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_void_Set_pin_dir+0x78>
 112:	ba 01       	movw	r22, r20
 114:	62 2b       	or	r22, r18
 116:	61 bb       	out	0x11, r22	; 17
 118:	08 95       	ret
			}
		}			
		else
		{
			switch (copy_u8_port)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	a9 f0       	breq	.+42     	; 0x148 <DIO_void_Set_pin_dir+0xb6>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	28 f0       	brcs	.+10     	; 0x12c <DIO_void_Set_pin_dir+0x9a>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	f9 f0       	breq	.+62     	; 0x164 <DIO_void_Set_pin_dir+0xd2>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	c1 f5       	brne	.+112    	; 0x19a <DIO_void_Set_pin_dir+0x108>
 12a:	2a c0       	rjmp	.+84     	; 0x180 <DIO_void_Set_pin_dir+0xee>
			{
				case PORTA: CLR_BIT(DDRA_REG, copy_u8_pin); break;
 12c:	2a b3       	in	r18, 0x1a	; 26
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_void_Set_pin_dir+0xa8>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_void_Set_pin_dir+0xa4>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	6a bb       	out	0x1a, r22	; 26
 146:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_REG, copy_u8_pin); break;
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_void_Set_pin_dir+0xc4>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_void_Set_pin_dir+0xc0>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_REG, copy_u8_pin); break;
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	ac 01       	movw	r20, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_void_Set_pin_dir+0xe0>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_void_Set_pin_dir+0xdc>
 176:	ba 01       	movw	r22, r20
 178:	60 95       	com	r22
 17a:	62 23       	and	r22, r18
 17c:	64 bb       	out	0x14, r22	; 20
 17e:	08 95       	ret
				case PORTD: CLR_BIT(DDRD_REG, copy_u8_pin); break;
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ac 01       	movw	r20, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_void_Set_pin_dir+0xfc>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_void_Set_pin_dir+0xf8>
 192:	ba 01       	movw	r22, r20
 194:	60 95       	com	r22
 196:	62 23       	and	r22, r18
 198:	61 bb       	out	0x11, r22	; 17
 19a:	08 95       	ret

0000019c <DIO_void_Set_pin_val>:
	}
}

void DIO_void_Set_pin_val(u8 copy_u8_port, u8 copy_u8_pin, u8 copy_u8_val)
{
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 19c:	68 30       	cpi	r22, 0x08	; 8
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <DIO_void_Set_pin_val+0x6>
 1a0:	81 c0       	rjmp	.+258    	; 0x2a4 <DIO_void_Set_pin_val+0x108>
	{
		if (copy_u8_val == OUTPUT)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <DIO_void_Set_pin_val+0xc>
 1a6:	3e c0       	rjmp	.+124    	; 0x224 <DIO_void_Set_pin_val+0x88>
		{
			switch (copy_u8_port)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	a9 f0       	breq	.+42     	; 0x1d6 <DIO_void_Set_pin_val+0x3a>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	30 f0       	brcs	.+12     	; 0x1bc <DIO_void_Set_pin_val+0x20>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	f1 f0       	breq	.+60     	; 0x1f0 <DIO_void_Set_pin_val+0x54>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	09 f0       	breq	.+2      	; 0x1ba <DIO_void_Set_pin_val+0x1e>
 1b8:	75 c0       	rjmp	.+234    	; 0x2a4 <DIO_void_Set_pin_val+0x108>
 1ba:	27 c0       	rjmp	.+78     	; 0x20a <DIO_void_Set_pin_val+0x6e>
			{
				case PORTA: SET_BIT(PORTA_REG, copy_u8_pin); break;
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_void_Set_pin_val+0x2e>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_void_Set_pin_val+0x2a>
 1ce:	ba 01       	movw	r22, r20
 1d0:	62 2b       	or	r22, r18
 1d2:	6b bb       	out	0x1b, r22	; 27
 1d4:	08 95       	ret
				case PORTB: SET_BIT(PORTB_REG, copy_u8_pin); break;
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_void_Set_pin_val+0x48>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_void_Set_pin_val+0x44>
 1e8:	ba 01       	movw	r22, r20
 1ea:	62 2b       	or	r22, r18
 1ec:	68 bb       	out	0x18, r22	; 24
 1ee:	08 95       	ret
				case PORTC: SET_BIT(PORTC_REG, copy_u8_pin); break;
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_void_Set_pin_val+0x62>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_void_Set_pin_val+0x5e>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	65 bb       	out	0x15, r22	; 21
 208:	08 95       	ret
				case PORTD: SET_BIT(PORTD_REG, copy_u8_pin); break;
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_void_Set_pin_val+0x7c>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_void_Set_pin_val+0x78>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	62 bb       	out	0x12, r22	; 18
 222:	08 95       	ret
			}
		}			
		else
		{
			switch (copy_u8_port)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	a9 f0       	breq	.+42     	; 0x252 <DIO_void_Set_pin_val+0xb6>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	28 f0       	brcs	.+10     	; 0x236 <DIO_void_Set_pin_val+0x9a>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	f9 f0       	breq	.+62     	; 0x26e <DIO_void_Set_pin_val+0xd2>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	c1 f5       	brne	.+112    	; 0x2a4 <DIO_void_Set_pin_val+0x108>
 234:	2a c0       	rjmp	.+84     	; 0x28a <DIO_void_Set_pin_val+0xee>
			{
				case PORTA: CLR_BIT(PORTA_REG, copy_u8_pin); break;
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_void_Set_pin_val+0xa8>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_void_Set_pin_val+0xa4>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	62 23       	and	r22, r18
 24e:	6b bb       	out	0x1b, r22	; 27
 250:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_REG, copy_u8_pin); break;
 252:	28 b3       	in	r18, 0x18	; 24
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_void_Set_pin_val+0xc4>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_void_Set_pin_val+0xc0>
 264:	ba 01       	movw	r22, r20
 266:	60 95       	com	r22
 268:	62 23       	and	r22, r18
 26a:	68 bb       	out	0x18, r22	; 24
 26c:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_REG, copy_u8_pin); break;
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ac 01       	movw	r20, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_void_Set_pin_val+0xe0>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_void_Set_pin_val+0xdc>
 280:	ba 01       	movw	r22, r20
 282:	60 95       	com	r22
 284:	62 23       	and	r22, r18
 286:	65 bb       	out	0x15, r22	; 21
 288:	08 95       	ret
				case PORTD: CLR_BIT(PORTD_REG, copy_u8_pin); break;
 28a:	22 b3       	in	r18, 0x12	; 18
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_void_Set_pin_val+0xfc>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_void_Set_pin_val+0xf8>
 29c:	ba 01       	movw	r22, r20
 29e:	60 95       	com	r22
 2a0:	62 23       	and	r22, r18
 2a2:	62 bb       	out	0x12, r22	; 18
 2a4:	08 95       	ret

000002a6 <DIO_void_Toggle_pin_val>:
	
}

void DIO_void_Toggle_pin_val(u8 copy_u8_port, u8 copy_u8_pin)
{
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 2a6:	68 30       	cpi	r22, 0x08	; 8
 2a8:	08 f0       	brcs	.+2      	; 0x2ac <DIO_void_Toggle_pin_val+0x6>
 2aa:	3c c0       	rjmp	.+120    	; 0x324 <DIO_void_Toggle_pin_val+0x7e>
	{
		switch (copy_u8_port)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	a1 f0       	breq	.+40     	; 0x2d8 <DIO_void_Toggle_pin_val+0x32>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	28 f0       	brcs	.+10     	; 0x2be <DIO_void_Toggle_pin_val+0x18>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	e9 f0       	breq	.+58     	; 0x2f2 <DIO_void_Toggle_pin_val+0x4c>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	a1 f5       	brne	.+104    	; 0x324 <DIO_void_Toggle_pin_val+0x7e>
 2bc:	27 c0       	rjmp	.+78     	; 0x30c <DIO_void_Toggle_pin_val+0x66>
		{
			case PORTA: TOGGLE_BIT(PORTA_REG, copy_u8_pin); break;
 2be:	2b b3       	in	r18, 0x1b	; 27
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_void_Toggle_pin_val+0x26>
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_void_Toggle_pin_val+0x22>
 2d0:	ba 01       	movw	r22, r20
 2d2:	62 27       	eor	r22, r18
 2d4:	6b bb       	out	0x1b, r22	; 27
 2d6:	08 95       	ret
			case PORTB: TOGGLE_BIT(PORTB_REG, copy_u8_pin); break;
 2d8:	28 b3       	in	r18, 0x18	; 24
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ac 01       	movw	r20, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_void_Toggle_pin_val+0x40>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_void_Toggle_pin_val+0x3c>
 2ea:	ba 01       	movw	r22, r20
 2ec:	62 27       	eor	r22, r18
 2ee:	68 bb       	out	0x18, r22	; 24
 2f0:	08 95       	ret
			case PORTC: TOGGLE_BIT(PORTC_REG, copy_u8_pin); break;
 2f2:	25 b3       	in	r18, 0x15	; 21
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ac 01       	movw	r20, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_void_Toggle_pin_val+0x5a>
 2fc:	44 0f       	add	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_void_Toggle_pin_val+0x56>
 304:	ba 01       	movw	r22, r20
 306:	62 27       	eor	r22, r18
 308:	65 bb       	out	0x15, r22	; 21
 30a:	08 95       	ret
			case PORTD: TOGGLE_BIT(PORTD_REG, copy_u8_pin); break;
 30c:	22 b3       	in	r18, 0x12	; 18
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	ac 01       	movw	r20, r24
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_void_Toggle_pin_val+0x74>
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_void_Toggle_pin_val+0x70>
 31e:	ba 01       	movw	r22, r20
 320:	62 27       	eor	r22, r18
 322:	62 bb       	out	0x12, r22	; 18
 324:	08 95       	ret

00000326 <DIO_void_Get_pin_val>:
}

u8	 DIO_void_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin) 
{
	u8 LOC_u8_val = 0;
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 326:	68 30       	cpi	r22, 0x08	; 8
 328:	98 f5       	brcc	.+102    	; 0x390 <DIO_void_Get_pin_val+0x6a>
	{
		switch(copy_u8_port)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	89 f0       	breq	.+34     	; 0x350 <DIO_void_Get_pin_val+0x2a>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	28 f0       	brcs	.+10     	; 0x33c <DIO_void_Get_pin_val+0x16>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	b9 f0       	breq	.+46     	; 0x364 <DIO_void_Get_pin_val+0x3e>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	49 f5       	brne	.+82     	; 0x38c <DIO_void_Get_pin_val+0x66>
 33a:	1e c0       	rjmp	.+60     	; 0x378 <DIO_void_Get_pin_val+0x52>
		{
			case PORTA: LOC_u8_val = GET_BIT(PINA_REG, copy_u8_pin); break;
 33c:	29 b3       	in	r18, 0x19	; 25
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	c9 01       	movw	r24, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_void_Get_pin_val+0x22>
 344:	95 95       	asr	r25
 346:	87 95       	ror	r24
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_void_Get_pin_val+0x1e>
 34c:	81 70       	andi	r24, 0x01	; 1
 34e:	08 95       	ret
			case PORTB: LOC_u8_val = GET_BIT(PINB_REG, copy_u8_pin); break;
 350:	26 b3       	in	r18, 0x16	; 22
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	c9 01       	movw	r24, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_void_Get_pin_val+0x36>
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_void_Get_pin_val+0x32>
 360:	81 70       	andi	r24, 0x01	; 1
 362:	08 95       	ret
			case PORTC: LOC_u8_val = GET_BIT(PINC_REG, copy_u8_pin); break;
 364:	23 b3       	in	r18, 0x13	; 19
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	c9 01       	movw	r24, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_void_Get_pin_val+0x4a>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_void_Get_pin_val+0x46>
 374:	81 70       	andi	r24, 0x01	; 1
 376:	08 95       	ret
			case PORTD: LOC_u8_val = GET_BIT(PIND_REG, copy_u8_pin); break;
 378:	20 b3       	in	r18, 0x10	; 16
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	c9 01       	movw	r24, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_void_Get_pin_val+0x5e>
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_void_Get_pin_val+0x5a>
 388:	81 70       	andi	r24, 0x01	; 1
 38a:	08 95       	ret
	}
}

u8	 DIO_void_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin) 
{
	u8 LOC_u8_val = 0;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
			case PORTC: LOC_u8_val = GET_BIT(PINC_REG, copy_u8_pin); break;
			case PORTD: LOC_u8_val = GET_BIT(PIND_REG, copy_u8_pin); break;
		}
		return LOC_u8_val;
	}
 390:	08 95       	ret

00000392 <LED_ON>:
#include "MATH.h"
#include "DIO_Interface.h"
#include "LED_Interface.h"

void LED_ON(u8 copy_u8_port, u8 copy_u8_pin)
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	d8 2f       	mov	r29, r24
 398:	c6 2f       	mov	r28, r22
	DIO_void_Set_pin_dir(copy_u8_port, copy_u8_pin, OUTPUT);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_val(copy_u8_port, copy_u8_pin, HIGH);
 3a0:	8d 2f       	mov	r24, r29
 3a2:	6c 2f       	mov	r22, r28
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <LED_OFF>:

void LED_OFF(u8 copy_u8_port, u8 copy_u8_pin)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	d8 2f       	mov	r29, r24
 3b6:	c6 2f       	mov	r28, r22
	DIO_void_Set_pin_dir(copy_u8_port, copy_u8_pin, OUTPUT);
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_val(copy_u8_port, copy_u8_pin, LOW);
 3be:	8d 2f       	mov	r24, r29
 3c0:	6c 2f       	mov	r22, r28
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <LED_TOGGLE>:

void LED_TOGGLE(u8 copy_u8_port, u8 copy_u8_pin)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	d8 2f       	mov	r29, r24
 3d4:	c6 2f       	mov	r28, r22
	DIO_void_Set_pin_dir(copy_u8_port, copy_u8_pin, OUTPUT);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Toggle_pin_val(copy_u8_port, copy_u8_pin);
 3dc:	8d 2f       	mov	r24, r29
 3de:	6c 2f       	mov	r22, r28
 3e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_void_Toggle_pin_val>
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <main>:

int main(void)
{	
    while(1)
    {
        LED_TOGGLE(PORTC, PIN2);
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_TOGGLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	93 ed       	ldi	r25, 0xD3	; 211
 3f6:	a0 e3       	ldi	r26, 0x30	; 48
 3f8:	81 50       	subi	r24, 0x01	; 1
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	a0 40       	sbci	r26, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <main+0xe>
 400:	00 c0       	rjmp	.+0      	; 0x402 <main+0x18>
 402:	00 00       	nop
 404:	f2 cf       	rjmp	.-28     	; 0x3ea <main>

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>

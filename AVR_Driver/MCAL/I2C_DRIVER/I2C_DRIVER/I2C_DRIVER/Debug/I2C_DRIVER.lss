
I2C_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000770  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bc  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006f  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000016e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Master_init>:



void I2C_Master_init(void) 
{
	TWBR = 5;
  6c:	85 e0       	ldi	r24, 0x05	; 5
  6e:	80 b9       	out	0x00, r24	; 0
  70:	08 95       	ret

00000072 <I2C_Mater_Start>:
}

void I2C_Mater_Start(void)
{
	TWCR = (1<<7)|(1<<5)|(1<<2) ;
  72:	84 ea       	ldi	r24, 0xA4	; 164
  74:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR, 7) == 0) ;
  76:	86 b7       	in	r24, 0x36	; 54
  78:	08 95       	ret

0000007a <I2C_Master_Address>:
}

void I2C_Master_Address(u8 ID, u8 R_OR_W) 
{
	TWDR = ID << 1 ;
  7a:	88 0f       	add	r24, r24
  7c:	83 b9       	out	0x03, r24	; 3
	if(R_OR_W == 1)
  7e:	61 30       	cpi	r22, 0x01	; 1
  80:	21 f4       	brne	.+8      	; 0x8a <I2C_Master_Address+0x10>
	{
		SET_BIT(TWDR, 0);
  82:	83 b1       	in	r24, 0x03	; 3
  84:	81 60       	ori	r24, 0x01	; 1
  86:	83 b9       	out	0x03, r24	; 3
  88:	03 c0       	rjmp	.+6      	; 0x90 <I2C_Master_Address+0x16>
	}
	else
	{
		CLR_BIT(TWDR, 0);
  8a:	83 b1       	in	r24, 0x03	; 3
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	83 b9       	out	0x03, r24	; 3
	}
	
	TWCR = (1<<7) | (1<<2);
  90:	84 e8       	ldi	r24, 0x84	; 132
  92:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR, 7) == 0) ;
  94:	86 b7       	in	r24, 0x36	; 54
  96:	08 95       	ret

00000098 <I2C_Master_Data>:
}

void I2C_Master_Data(u8 data) 
{
	TWDR = data;
  98:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<7) | (1<<2);
  9a:	84 e8       	ldi	r24, 0x84	; 132
  9c:	86 bf       	out	0x36, r24	; 54
	while(GET_BIT(TWCR, 7) == 0) ;
  9e:	86 b7       	in	r24, 0x36	; 54
  a0:	08 95       	ret

000000a2 <I2C_Mater_Stop>:
}

void I2C_Mater_Stop(void) 
{
	TWCR = (1<<7) | (1<<4) | (1<<2);
  a2:	84 e9       	ldi	r24, 0x94	; 148
  a4:	86 bf       	out	0x36, r24	; 54
  a6:	08 95       	ret

000000a8 <main>:
#include "I2C_Interface.h"


int main(void)
{
	I2C_Master_init();
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Master_init>
    /* Replace with your application code */
    while (1) 
    {
			I2C_Mater_Start();
  ac:	0e 94 39 00 	call	0x72	; 0x72 <I2C_Mater_Start>
			I2C_Master_Address(30, 0);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	8e e1       	ldi	r24, 0x1E	; 30
  b4:	0e 94 3d 00 	call	0x7a	; 0x7a <I2C_Master_Address>
			I2C_Master_Data('a');
  b8:	81 e6       	ldi	r24, 0x61	; 97
  ba:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_Master_Data>
			I2C_Mater_Stop();
  be:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_Mater_Stop>
  c2:	f4 cf       	rjmp	.-24     	; 0xac <main+0x4>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

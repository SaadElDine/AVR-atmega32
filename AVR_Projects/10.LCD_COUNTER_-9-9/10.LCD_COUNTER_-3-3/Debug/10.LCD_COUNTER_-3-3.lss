
10.LCD_COUNTER_-3-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000770  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000770  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000f38  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000879  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000365  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b9  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bf  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  000025ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	b5 00       	.word	0x00b5	; ????
  56:	bf 00       	.word	0x00bf	; ????
  58:	c9 00       	.word	0x00c9	; ????
  5a:	d3 00       	.word	0x00d3	; ????
  5c:	dd 00       	.word	0x00dd	; ????
  5e:	e7 00       	.word	0x00e7	; ????
  60:	f1 00       	.word	0x00f1	; ????
  62:	fb 00       	.word	0x00fb	; ????
  64:	05 01       	movw	r0, r10
  66:	0f 01       	movw	r0, r30
  68:	16 01       	movw	r2, r12
  6a:	1d 01       	movw	r2, r26
  6c:	24 01       	movw	r4, r8
  6e:	2b 01       	movw	r4, r22
  70:	32 01       	movw	r6, r4
  72:	39 01       	movw	r6, r18
  74:	40 01       	movw	r8, r0
  76:	47 01       	movw	r8, r14
  78:	4e 01       	movw	r8, r28

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf e5       	ldi	r28, 0x5F	; 95
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	a0 e6       	ldi	r26, 0x60	; 96
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e0 e7       	ldi	r30, 0x70	; 112
  8e:	f7 e0       	ldi	r31, 0x07	; 7
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a0 36       	cpi	r26, 0x60	; 96
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	a0 e6       	ldi	r26, 0x60	; 96
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a0 36       	cpi	r26, 0x60	; 96
  a8:	b1 07       	cpc	r27, r17
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
#include "LCD_Interface.h"
#include <util/delay.h>

int main(void)
{
	DIO_void_Set_pin_dir(PORTB, PIN0, INPUT);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D4,OUTPUT) ;
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D5,OUTPUT) ;
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	65 e0       	ldi	r22, 0x05	; 5
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D6,OUTPUT) ;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D7,OUTPUT) ;
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	67 e0       	ldi	r22, 0x07	; 7
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_RS_PORT,LCD_RS_Pin,OUTPUT) ;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_RW_PORT,LCD_RW_Pin,OUTPUT) ;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_E_PORT,LCD_E_Pin,OUTPUT) ;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_void_Set_pin_dir>
	LCD_void_init();
 108:	0e 94 81 03 	call	0x702	; 0x702 <LCD_void_init>
    s8 counter = -9;
	LCD_void_Send_Data(45); LCD_void_Send_Data(57); 
 10c:	8d e2       	ldi	r24, 0x2D	; 45
 10e:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 112:	89 e3       	ldi	r24, 0x39	; 57
 114:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D7,OUTPUT) ;
	DIO_void_Set_pin_dir(LCD_RS_PORT,LCD_RS_Pin,OUTPUT) ;
	DIO_void_Set_pin_dir(LCD_RW_PORT,LCD_RW_Pin,OUTPUT) ;
	DIO_void_Set_pin_dir(LCD_E_PORT,LCD_E_Pin,OUTPUT) ;
	LCD_void_init();
    s8 counter = -9;
 118:	c7 ef       	ldi	r28, 0xF7	; 247
	LCD_void_Send_Data(45); LCD_void_Send_Data(57); 
    while(1)
    {
	    if(counter >= 9)
	    {
		    counter = -10;
 11a:	d6 ef       	ldi	r29, 0xF6	; 246
	LCD_void_init();
    s8 counter = -9;
	LCD_void_Send_Data(45); LCD_void_Send_Data(57); 
    while(1)
    {
	    if(counter >= 9)
 11c:	c9 30       	cpi	r28, 0x09	; 9
 11e:	0c f0       	brlt	.+2      	; 0x122 <main+0x6a>
	    {
		    counter = -10;
 120:	cd 2f       	mov	r28, r29
	    }
	    
	    if(DIO_void_Get_pin_val(PORTB, PIN0) == 1)
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	0e 94 a8 02 	call	0x550	; 0x550 <DIO_void_Get_pin_val>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	b9 f7       	brne	.-18     	; 0x11c <main+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	91 ee       	ldi	r25, 0xE1	; 225
 132:	a4 e0       	ldi	r26, 0x04	; 4
 134:	81 50       	subi	r24, 0x01	; 1
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	a0 40       	sbci	r26, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x7c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x86>
 13e:	00 00       	nop
	    {
		    _delay_ms(100);
			counter++;
 140:	cf 5f       	subi	r28, 0xFF	; 255
		    switch(counter)
 142:	8c 2f       	mov	r24, r28
 144:	99 27       	eor	r25, r25
 146:	87 fd       	sbrc	r24, 7
 148:	90 95       	com	r25
 14a:	a9 2f       	mov	r26, r25
 14c:	b9 2f       	mov	r27, r25
 14e:	09 96       	adiw	r24, 0x09	; 9
 150:	83 31       	cpi	r24, 0x13	; 19
 152:	91 05       	cpc	r25, r1
 154:	08 f0       	brcs	.+2      	; 0x158 <main+0xa0>
 156:	a8 c0       	rjmp	.+336    	; 0x2a8 <main+0x1f0>
 158:	86 5d       	subi	r24, 0xD6	; 214
 15a:	9f 4f       	sbci	r25, 0xFF	; 255
 15c:	fc 01       	movw	r30, r24
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	05 90       	lpm	r0, Z+
 164:	f4 91       	lpm	r31, Z
 166:	e0 2d       	mov	r30, r0
 168:	09 94       	ijmp
		    {
				case -9: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(57); break;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 170:	8d e2       	ldi	r24, 0x2D	; 45
 172:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 176:	89 e3       	ldi	r24, 0x39	; 57
 178:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 17c:	95 c0       	rjmp	.+298    	; 0x2a8 <main+0x1f0>
				case -8: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(56); break;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 184:	8d e2       	ldi	r24, 0x2D	; 45
 186:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 190:	8b c0       	rjmp	.+278    	; 0x2a8 <main+0x1f0>
				case -7: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(55); break;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 198:	8d e2       	ldi	r24, 0x2D	; 45
 19a:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 19e:	87 e3       	ldi	r24, 0x37	; 55
 1a0:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1a4:	81 c0       	rjmp	.+258    	; 0x2a8 <main+0x1f0>
				case -6: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(54); break;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 1ac:	8d e2       	ldi	r24, 0x2D	; 45
 1ae:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1b2:	86 e3       	ldi	r24, 0x36	; 54
 1b4:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1b8:	77 c0       	rjmp	.+238    	; 0x2a8 <main+0x1f0>
				case -5: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(53); break;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 1c0:	8d e2       	ldi	r24, 0x2D	; 45
 1c2:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1c6:	85 e3       	ldi	r24, 0x35	; 53
 1c8:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1cc:	6d c0       	rjmp	.+218    	; 0x2a8 <main+0x1f0>
				case -4: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(52); break;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 1d4:	8d e2       	ldi	r24, 0x2D	; 45
 1d6:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1da:	84 e3       	ldi	r24, 0x34	; 52
 1dc:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1e0:	63 c0       	rjmp	.+198    	; 0x2a8 <main+0x1f0>
			    case -3: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(51); break;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 1e8:	8d e2       	ldi	r24, 0x2D	; 45
 1ea:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1ee:	83 e3       	ldi	r24, 0x33	; 51
 1f0:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 1f4:	59 c0       	rjmp	.+178    	; 0x2a8 <main+0x1f0>
			    case -2: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(50); break;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 1fc:	8d e2       	ldi	r24, 0x2D	; 45
 1fe:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 202:	82 e3       	ldi	r24, 0x32	; 50
 204:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 208:	4f c0       	rjmp	.+158    	; 0x2a8 <main+0x1f0>
			    case -1: LCD_void_Send_Command(1); LCD_void_Send_Data(45); LCD_void_Send_Data(49); break;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 210:	8d e2       	ldi	r24, 0x2D	; 45
 212:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 216:	81 e3       	ldi	r24, 0x31	; 49
 218:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 21c:	45 c0       	rjmp	.+138    	; 0x2a8 <main+0x1f0>
			    case 0:  LCD_void_Send_Command(1); LCD_void_Send_Data(48); break;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 22a:	3e c0       	rjmp	.+124    	; 0x2a8 <main+0x1f0>
				case 1:  LCD_void_Send_Command(1); LCD_void_Send_Data(49); break;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 232:	81 e3       	ldi	r24, 0x31	; 49
 234:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 238:	37 c0       	rjmp	.+110    	; 0x2a8 <main+0x1f0>
				case 2:  LCD_void_Send_Command(1); LCD_void_Send_Data(50); break;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 240:	82 e3       	ldi	r24, 0x32	; 50
 242:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 246:	30 c0       	rjmp	.+96     	; 0x2a8 <main+0x1f0>
				case 3:  LCD_void_Send_Command(1); LCD_void_Send_Data(51); break;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 24e:	83 e3       	ldi	r24, 0x33	; 51
 250:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 254:	29 c0       	rjmp	.+82     	; 0x2a8 <main+0x1f0>
				case 4:  LCD_void_Send_Command(1); LCD_void_Send_Data(52); break;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 25c:	84 e3       	ldi	r24, 0x34	; 52
 25e:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 262:	22 c0       	rjmp	.+68     	; 0x2a8 <main+0x1f0>
				case 5:  LCD_void_Send_Command(1); LCD_void_Send_Data(53); break;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 26a:	85 e3       	ldi	r24, 0x35	; 53
 26c:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 270:	1b c0       	rjmp	.+54     	; 0x2a8 <main+0x1f0>
				case 6:  LCD_void_Send_Command(1); LCD_void_Send_Data(54); break;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 278:	86 e3       	ldi	r24, 0x36	; 54
 27a:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 27e:	14 c0       	rjmp	.+40     	; 0x2a8 <main+0x1f0>
				case 7:  LCD_void_Send_Command(1); LCD_void_Send_Data(55); break;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 286:	87 e3       	ldi	r24, 0x37	; 55
 288:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <main+0x1f0>
				case 8:  LCD_void_Send_Command(1); LCD_void_Send_Data(56); break;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 294:	88 e3       	ldi	r24, 0x38	; 56
 296:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <main+0x1f0>
				case 9:  LCD_void_Send_Command(1); LCD_void_Send_Data(57); break;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
 2a2:	89 e3       	ldi	r24, 0x39	; 57
 2a4:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	91 ee       	ldi	r25, 0xE1	; 225
 2ac:	a4 e0       	ldi	r26, 0x04	; 4
 2ae:	81 50       	subi	r24, 0x01	; 1
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	a0 40       	sbci	r26, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x1f6>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x200>
 2b8:	00 00       	nop
 2ba:	30 cf       	rjmp	.-416    	; 0x11c <main+0x64>

000002bc <DIO_void_Set_pin_dir>:
#include "DIO_Address.h"
#include "DIO_Interface.h"


void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin, u8 copy_u8_dir) {
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 2bc:	68 30       	cpi	r22, 0x08	; 8
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <DIO_void_Set_pin_dir+0x6>
 2c0:	81 c0       	rjmp	.+258    	; 0x3c4 <DIO_void_Set_pin_dir+0x108>
	{
		if (copy_u8_dir == OUTPUT)
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <DIO_void_Set_pin_dir+0xc>
 2c6:	3e c0       	rjmp	.+124    	; 0x344 <DIO_void_Set_pin_dir+0x88>
		{
			switch (copy_u8_port)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	a9 f0       	breq	.+42     	; 0x2f6 <DIO_void_Set_pin_dir+0x3a>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	30 f0       	brcs	.+12     	; 0x2dc <DIO_void_Set_pin_dir+0x20>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	f1 f0       	breq	.+60     	; 0x310 <DIO_void_Set_pin_dir+0x54>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	09 f0       	breq	.+2      	; 0x2da <DIO_void_Set_pin_dir+0x1e>
 2d8:	75 c0       	rjmp	.+234    	; 0x3c4 <DIO_void_Set_pin_dir+0x108>
 2da:	27 c0       	rjmp	.+78     	; 0x32a <DIO_void_Set_pin_dir+0x6e>
			{
				case PORTA: SET_BIT(DDRA_REG, copy_u8_pin); break;
 2dc:	2a b3       	in	r18, 0x1a	; 26
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	ac 01       	movw	r20, r24
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_void_Set_pin_dir+0x2e>
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_void_Set_pin_dir+0x2a>
 2ee:	ba 01       	movw	r22, r20
 2f0:	62 2b       	or	r22, r18
 2f2:	6a bb       	out	0x1a, r22	; 26
 2f4:	08 95       	ret
				case PORTB: SET_BIT(DDRB_REG, copy_u8_pin); break;
 2f6:	27 b3       	in	r18, 0x17	; 23
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	ac 01       	movw	r20, r24
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_void_Set_pin_dir+0x48>
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_void_Set_pin_dir+0x44>
 308:	ba 01       	movw	r22, r20
 30a:	62 2b       	or	r22, r18
 30c:	67 bb       	out	0x17, r22	; 23
 30e:	08 95       	ret
				case PORTC: SET_BIT(DDRC_REG, copy_u8_pin); break;
 310:	24 b3       	in	r18, 0x14	; 20
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	ac 01       	movw	r20, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_void_Set_pin_dir+0x62>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_void_Set_pin_dir+0x5e>
 322:	ba 01       	movw	r22, r20
 324:	62 2b       	or	r22, r18
 326:	64 bb       	out	0x14, r22	; 20
 328:	08 95       	ret
				case PORTD: SET_BIT(DDRD_REG, copy_u8_pin); break;
 32a:	21 b3       	in	r18, 0x11	; 17
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	ac 01       	movw	r20, r24
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_void_Set_pin_dir+0x7c>
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_void_Set_pin_dir+0x78>
 33c:	ba 01       	movw	r22, r20
 33e:	62 2b       	or	r22, r18
 340:	61 bb       	out	0x11, r22	; 17
 342:	08 95       	ret
			}
		}			
		else
		{
			switch (copy_u8_port)
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	a9 f0       	breq	.+42     	; 0x372 <DIO_void_Set_pin_dir+0xb6>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	28 f0       	brcs	.+10     	; 0x356 <DIO_void_Set_pin_dir+0x9a>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	f9 f0       	breq	.+62     	; 0x38e <DIO_void_Set_pin_dir+0xd2>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	c1 f5       	brne	.+112    	; 0x3c4 <DIO_void_Set_pin_dir+0x108>
 354:	2a c0       	rjmp	.+84     	; 0x3aa <DIO_void_Set_pin_dir+0xee>
			{
				case PORTA: CLR_BIT(DDRA_REG, copy_u8_pin); break;
 356:	2a b3       	in	r18, 0x1a	; 26
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_void_Set_pin_dir+0xa8>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_void_Set_pin_dir+0xa4>
 368:	ba 01       	movw	r22, r20
 36a:	60 95       	com	r22
 36c:	62 23       	and	r22, r18
 36e:	6a bb       	out	0x1a, r22	; 26
 370:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_REG, copy_u8_pin); break;
 372:	27 b3       	in	r18, 0x17	; 23
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	ac 01       	movw	r20, r24
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_void_Set_pin_dir+0xc4>
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_void_Set_pin_dir+0xc0>
 384:	ba 01       	movw	r22, r20
 386:	60 95       	com	r22
 388:	62 23       	and	r22, r18
 38a:	67 bb       	out	0x17, r22	; 23
 38c:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_REG, copy_u8_pin); break;
 38e:	24 b3       	in	r18, 0x14	; 20
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	ac 01       	movw	r20, r24
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_void_Set_pin_dir+0xe0>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_void_Set_pin_dir+0xdc>
 3a0:	ba 01       	movw	r22, r20
 3a2:	60 95       	com	r22
 3a4:	62 23       	and	r22, r18
 3a6:	64 bb       	out	0x14, r22	; 20
 3a8:	08 95       	ret
				case PORTD: CLR_BIT(DDRD_REG, copy_u8_pin); break;
 3aa:	21 b3       	in	r18, 0x11	; 17
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ac 01       	movw	r20, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_void_Set_pin_dir+0xfc>
 3b4:	44 0f       	add	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_void_Set_pin_dir+0xf8>
 3bc:	ba 01       	movw	r22, r20
 3be:	60 95       	com	r22
 3c0:	62 23       	and	r22, r18
 3c2:	61 bb       	out	0x11, r22	; 17
 3c4:	08 95       	ret

000003c6 <DIO_void_Set_pin_val>:
	}
}

void DIO_void_Set_pin_val(u8 copy_u8_port, u8 copy_u8_pin, u8 copy_u8_val)
{
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 3c6:	68 30       	cpi	r22, 0x08	; 8
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <DIO_void_Set_pin_val+0x6>
 3ca:	81 c0       	rjmp	.+258    	; 0x4ce <DIO_void_Set_pin_val+0x108>
	{
		if (copy_u8_val == OUTPUT)
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <DIO_void_Set_pin_val+0xc>
 3d0:	3e c0       	rjmp	.+124    	; 0x44e <DIO_void_Set_pin_val+0x88>
		{
			switch (copy_u8_port)
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	a9 f0       	breq	.+42     	; 0x400 <DIO_void_Set_pin_val+0x3a>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	30 f0       	brcs	.+12     	; 0x3e6 <DIO_void_Set_pin_val+0x20>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	f1 f0       	breq	.+60     	; 0x41a <DIO_void_Set_pin_val+0x54>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <DIO_void_Set_pin_val+0x1e>
 3e2:	75 c0       	rjmp	.+234    	; 0x4ce <DIO_void_Set_pin_val+0x108>
 3e4:	27 c0       	rjmp	.+78     	; 0x434 <DIO_void_Set_pin_val+0x6e>
			{
				case PORTA: SET_BIT(PORTA_REG, copy_u8_pin); break;
 3e6:	2b b3       	in	r18, 0x1b	; 27
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	ac 01       	movw	r20, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_void_Set_pin_val+0x2e>
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_void_Set_pin_val+0x2a>
 3f8:	ba 01       	movw	r22, r20
 3fa:	62 2b       	or	r22, r18
 3fc:	6b bb       	out	0x1b, r22	; 27
 3fe:	08 95       	ret
				case PORTB: SET_BIT(PORTB_REG, copy_u8_pin); break;
 400:	28 b3       	in	r18, 0x18	; 24
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	ac 01       	movw	r20, r24
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_void_Set_pin_val+0x48>
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_void_Set_pin_val+0x44>
 412:	ba 01       	movw	r22, r20
 414:	62 2b       	or	r22, r18
 416:	68 bb       	out	0x18, r22	; 24
 418:	08 95       	ret
				case PORTC: SET_BIT(PORTC_REG, copy_u8_pin); break;
 41a:	25 b3       	in	r18, 0x15	; 21
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	ac 01       	movw	r20, r24
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_void_Set_pin_val+0x62>
 424:	44 0f       	add	r20, r20
 426:	55 1f       	adc	r21, r21
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_void_Set_pin_val+0x5e>
 42c:	ba 01       	movw	r22, r20
 42e:	62 2b       	or	r22, r18
 430:	65 bb       	out	0x15, r22	; 21
 432:	08 95       	ret
				case PORTD: SET_BIT(PORTD_REG, copy_u8_pin); break;
 434:	22 b3       	in	r18, 0x12	; 18
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_void_Set_pin_val+0x7c>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_void_Set_pin_val+0x78>
 446:	ba 01       	movw	r22, r20
 448:	62 2b       	or	r22, r18
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret
			}
		}			
		else
		{
			switch (copy_u8_port)
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	a9 f0       	breq	.+42     	; 0x47c <DIO_void_Set_pin_val+0xb6>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	28 f0       	brcs	.+10     	; 0x460 <DIO_void_Set_pin_val+0x9a>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	f9 f0       	breq	.+62     	; 0x498 <DIO_void_Set_pin_val+0xd2>
 45a:	83 30       	cpi	r24, 0x03	; 3
 45c:	c1 f5       	brne	.+112    	; 0x4ce <DIO_void_Set_pin_val+0x108>
 45e:	2a c0       	rjmp	.+84     	; 0x4b4 <DIO_void_Set_pin_val+0xee>
			{
				case PORTA: CLR_BIT(PORTA_REG, copy_u8_pin); break;
 460:	2b b3       	in	r18, 0x1b	; 27
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	ac 01       	movw	r20, r24
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_void_Set_pin_val+0xa8>
 46a:	44 0f       	add	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_void_Set_pin_val+0xa4>
 472:	ba 01       	movw	r22, r20
 474:	60 95       	com	r22
 476:	62 23       	and	r22, r18
 478:	6b bb       	out	0x1b, r22	; 27
 47a:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_REG, copy_u8_pin); break;
 47c:	28 b3       	in	r18, 0x18	; 24
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ac 01       	movw	r20, r24
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_void_Set_pin_val+0xc4>
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_void_Set_pin_val+0xc0>
 48e:	ba 01       	movw	r22, r20
 490:	60 95       	com	r22
 492:	62 23       	and	r22, r18
 494:	68 bb       	out	0x18, r22	; 24
 496:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_REG, copy_u8_pin); break;
 498:	25 b3       	in	r18, 0x15	; 21
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	ac 01       	movw	r20, r24
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_void_Set_pin_val+0xe0>
 4a2:	44 0f       	add	r20, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_void_Set_pin_val+0xdc>
 4aa:	ba 01       	movw	r22, r20
 4ac:	60 95       	com	r22
 4ae:	62 23       	and	r22, r18
 4b0:	65 bb       	out	0x15, r22	; 21
 4b2:	08 95       	ret
				case PORTD: CLR_BIT(PORTD_REG, copy_u8_pin); break;
 4b4:	22 b3       	in	r18, 0x12	; 18
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	ac 01       	movw	r20, r24
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_void_Set_pin_val+0xfc>
 4be:	44 0f       	add	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_void_Set_pin_val+0xf8>
 4c6:	ba 01       	movw	r22, r20
 4c8:	60 95       	com	r22
 4ca:	62 23       	and	r22, r18
 4cc:	62 bb       	out	0x12, r22	; 18
 4ce:	08 95       	ret

000004d0 <DIO_void_Toggle_pin_val>:
	
}

void DIO_void_Toggle_pin_val(u8 copy_u8_port, u8 copy_u8_pin)
{
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 4d0:	68 30       	cpi	r22, 0x08	; 8
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <DIO_void_Toggle_pin_val+0x6>
 4d4:	3c c0       	rjmp	.+120    	; 0x54e <DIO_void_Toggle_pin_val+0x7e>
	{
		switch (copy_u8_port)
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	a1 f0       	breq	.+40     	; 0x502 <DIO_void_Toggle_pin_val+0x32>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	28 f0       	brcs	.+10     	; 0x4e8 <DIO_void_Toggle_pin_val+0x18>
 4de:	82 30       	cpi	r24, 0x02	; 2
 4e0:	e9 f0       	breq	.+58     	; 0x51c <DIO_void_Toggle_pin_val+0x4c>
 4e2:	83 30       	cpi	r24, 0x03	; 3
 4e4:	a1 f5       	brne	.+104    	; 0x54e <DIO_void_Toggle_pin_val+0x7e>
 4e6:	27 c0       	rjmp	.+78     	; 0x536 <DIO_void_Toggle_pin_val+0x66>
		{
			case PORTA: TOGGLE_BIT(PORTA_REG, copy_u8_pin); break;
 4e8:	2b b3       	in	r18, 0x1b	; 27
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	ac 01       	movw	r20, r24
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_void_Toggle_pin_val+0x26>
 4f2:	44 0f       	add	r20, r20
 4f4:	55 1f       	adc	r21, r21
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_void_Toggle_pin_val+0x22>
 4fa:	ba 01       	movw	r22, r20
 4fc:	62 27       	eor	r22, r18
 4fe:	6b bb       	out	0x1b, r22	; 27
 500:	08 95       	ret
			case PORTB: TOGGLE_BIT(PORTB_REG, copy_u8_pin); break;
 502:	28 b3       	in	r18, 0x18	; 24
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	ac 01       	movw	r20, r24
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_void_Toggle_pin_val+0x40>
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_void_Toggle_pin_val+0x3c>
 514:	ba 01       	movw	r22, r20
 516:	62 27       	eor	r22, r18
 518:	68 bb       	out	0x18, r22	; 24
 51a:	08 95       	ret
			case PORTC: TOGGLE_BIT(PORTC_REG, copy_u8_pin); break;
 51c:	25 b3       	in	r18, 0x15	; 21
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	ac 01       	movw	r20, r24
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_void_Toggle_pin_val+0x5a>
 526:	44 0f       	add	r20, r20
 528:	55 1f       	adc	r21, r21
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_void_Toggle_pin_val+0x56>
 52e:	ba 01       	movw	r22, r20
 530:	62 27       	eor	r22, r18
 532:	65 bb       	out	0x15, r22	; 21
 534:	08 95       	ret
			case PORTD: TOGGLE_BIT(PORTD_REG, copy_u8_pin); break;
 536:	22 b3       	in	r18, 0x12	; 18
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	ac 01       	movw	r20, r24
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_void_Toggle_pin_val+0x74>
 540:	44 0f       	add	r20, r20
 542:	55 1f       	adc	r21, r21
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_void_Toggle_pin_val+0x70>
 548:	ba 01       	movw	r22, r20
 54a:	62 27       	eor	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <DIO_void_Get_pin_val>:
}

u8	 DIO_void_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin) 
{
	u8 LOC_u8_val = 0;
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 550:	68 30       	cpi	r22, 0x08	; 8
 552:	98 f5       	brcc	.+102    	; 0x5ba <DIO_void_Get_pin_val+0x6a>
	{
		switch(copy_u8_port)
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	89 f0       	breq	.+34     	; 0x57a <DIO_void_Get_pin_val+0x2a>
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	28 f0       	brcs	.+10     	; 0x566 <DIO_void_Get_pin_val+0x16>
 55c:	82 30       	cpi	r24, 0x02	; 2
 55e:	b9 f0       	breq	.+46     	; 0x58e <DIO_void_Get_pin_val+0x3e>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	49 f5       	brne	.+82     	; 0x5b6 <DIO_void_Get_pin_val+0x66>
 564:	1e c0       	rjmp	.+60     	; 0x5a2 <DIO_void_Get_pin_val+0x52>
		{
			case PORTA: LOC_u8_val = GET_BIT(PINA_REG, copy_u8_pin); break;
 566:	29 b3       	in	r18, 0x19	; 25
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	c9 01       	movw	r24, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_void_Get_pin_val+0x22>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_void_Get_pin_val+0x1e>
 576:	81 70       	andi	r24, 0x01	; 1
 578:	08 95       	ret
			case PORTB: LOC_u8_val = GET_BIT(PINB_REG, copy_u8_pin); break;
 57a:	26 b3       	in	r18, 0x16	; 22
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	c9 01       	movw	r24, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_void_Get_pin_val+0x36>
 582:	95 95       	asr	r25
 584:	87 95       	ror	r24
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_void_Get_pin_val+0x32>
 58a:	81 70       	andi	r24, 0x01	; 1
 58c:	08 95       	ret
			case PORTC: LOC_u8_val = GET_BIT(PINC_REG, copy_u8_pin); break;
 58e:	23 b3       	in	r18, 0x13	; 19
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	c9 01       	movw	r24, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_void_Get_pin_val+0x4a>
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_void_Get_pin_val+0x46>
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	08 95       	ret
			case PORTD: LOC_u8_val = GET_BIT(PIND_REG, copy_u8_pin); break;
 5a2:	20 b3       	in	r18, 0x10	; 16
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	c9 01       	movw	r24, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_void_Get_pin_val+0x5e>
 5aa:	95 95       	asr	r25
 5ac:	87 95       	ror	r24
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_void_Get_pin_val+0x5a>
 5b2:	81 70       	andi	r24, 0x01	; 1
 5b4:	08 95       	ret
	}
}

u8	 DIO_void_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin) 
{
	u8 LOC_u8_val = 0;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	08 95       	ret
			case PORTC: LOC_u8_val = GET_BIT(PINC_REG, copy_u8_pin); break;
			case PORTD: LOC_u8_val = GET_BIT(PIND_REG, copy_u8_pin); break;
		}
		return LOC_u8_val;
	}
}
 5ba:	08 95       	ret

000005bc <DIO_void_Set_port_dir>:

void DIO_void_Set_port_dir(u8 copy_u8_port, u8 copy_u8_dir)
{
		switch (copy_u8_port)
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	49 f0       	breq	.+18     	; 0x5d2 <DIO_void_Set_port_dir+0x16>
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	28 f0       	brcs	.+10     	; 0x5ce <DIO_void_Set_port_dir+0x12>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	39 f0       	breq	.+14     	; 0x5d6 <DIO_void_Set_port_dir+0x1a>
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	41 f4       	brne	.+16     	; 0x5dc <DIO_void_Set_port_dir+0x20>
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <DIO_void_Set_port_dir+0x1e>
		{
			case PORTA: DDRA_REG = copy_u8_dir; break;
 5ce:	6a bb       	out	0x1a, r22	; 26
 5d0:	08 95       	ret
			case PORTB: DDRB_REG = copy_u8_dir; break;
 5d2:	67 bb       	out	0x17, r22	; 23
 5d4:	08 95       	ret
			case PORTC: DDRC_REG = copy_u8_dir; break;
 5d6:	64 bb       	out	0x14, r22	; 20
 5d8:	08 95       	ret
			case PORTD: DDRD_REG = copy_u8_dir; break;
 5da:	61 bb       	out	0x11, r22	; 17
 5dc:	08 95       	ret

000005de <DIO_void_Set_port_val>:
		}
}

void DIO_void_Set_port_val(u8 copy_u8_port, u8 copy_u8_val)
{
		switch (copy_u8_port)
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <DIO_void_Set_port_val+0x16>
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	28 f0       	brcs	.+10     	; 0x5f0 <DIO_void_Set_port_val+0x12>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <DIO_void_Set_port_val+0x1a>
 5ea:	83 30       	cpi	r24, 0x03	; 3
 5ec:	41 f4       	brne	.+16     	; 0x5fe <DIO_void_Set_port_val+0x20>
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <DIO_void_Set_port_val+0x1e>
		{
			case PORTA: PORTA_REG = copy_u8_val; break;
 5f0:	6b bb       	out	0x1b, r22	; 27
 5f2:	08 95       	ret
			case PORTB: PORTB_REG = copy_u8_val; break;
 5f4:	68 bb       	out	0x18, r22	; 24
 5f6:	08 95       	ret
			case PORTC: PORTC_REG = copy_u8_val; break;
 5f8:	65 bb       	out	0x15, r22	; 21
 5fa:	08 95       	ret
			case PORTD: PORTD_REG = copy_u8_val; break;
 5fc:	62 bb       	out	0x12, r22	; 18
 5fe:	08 95       	ret

00000600 <Send4bits>:
#include "LCD_interface.h"
#define F_CPU 16000000UL
#include <util/delay.h>

static void Send4bits(u8 data)
{	
 600:	cf 92       	push	r12
 602:	df 92       	push	r13
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	00 d0       	rcall	.+0      	; 0x612 <Send4bits+0x12>
 612:	00 d0       	rcall	.+0      	; 0x614 <Send4bits+0x14>
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
	u8 loc_DPIN[4]={LCD_D4,LCD_D5,LCD_D6,LCD_D7} ;
 618:	94 e0       	ldi	r25, 0x04	; 4
 61a:	99 83       	std	Y+1, r25	; 0x01
 61c:	95 e0       	ldi	r25, 0x05	; 5
 61e:	9a 83       	std	Y+2, r25	; 0x02
 620:	96 e0       	ldi	r25, 0x06	; 6
 622:	9b 83       	std	Y+3, r25	; 0x03
 624:	97 e0       	ldi	r25, 0x07	; 7
 626:	9c 83       	std	Y+4, r25	; 0x04
 628:	7e 01       	movw	r14, r28
 62a:	08 94       	sec
 62c:	e1 1c       	adc	r14, r1
 62e:	f1 1c       	adc	r15, r1
 630:	00 e0       	ldi	r16, 0x00	; 0
 632:	10 e0       	ldi	r17, 0x00	; 0
	u8 loc_iterator = 0 ;
	for(loc_iterator=0; loc_iterator < 4 ;loc_iterator++)
	{
		DIO_void_Set_pin_val(LCD_DPORT,loc_DPIN[loc_iterator],GET_BIT(data,loc_iterator)) ;
 634:	c8 2e       	mov	r12, r24
 636:	dd 24       	eor	r13, r13
 638:	f7 01       	movw	r30, r14
 63a:	61 91       	ld	r22, Z+
 63c:	7f 01       	movw	r14, r30
 63e:	a6 01       	movw	r20, r12
 640:	00 2e       	mov	r0, r16
 642:	02 c0       	rjmp	.+4      	; 0x648 <Send4bits+0x48>
 644:	55 95       	asr	r21
 646:	47 95       	ror	r20
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <Send4bits+0x44>
 64c:	41 70       	andi	r20, 0x01	; 1
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
 654:	0f 5f       	subi	r16, 0xFF	; 255
 656:	1f 4f       	sbci	r17, 0xFF	; 255

static void Send4bits(u8 data)
{	
	u8 loc_DPIN[4]={LCD_D4,LCD_D5,LCD_D6,LCD_D7} ;
	u8 loc_iterator = 0 ;
	for(loc_iterator=0; loc_iterator < 4 ;loc_iterator++)
 658:	04 30       	cpi	r16, 0x04	; 4
 65a:	11 05       	cpc	r17, r1
 65c:	69 f7       	brne	.-38     	; 0x638 <Send4bits+0x38>
	{
		DIO_void_Set_pin_val(LCD_DPORT,loc_DPIN[loc_iterator],GET_BIT(data,loc_iterator)) ;
	}
}
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	ff 90       	pop	r15
 670:	ef 90       	pop	r14
 672:	df 90       	pop	r13
 674:	cf 90       	pop	r12
 676:	08 95       	ret

00000678 <PulseEnable>:

static void PulseEnable(void)
{
	DIO_void_Set_pin_val(LCD_E_PORT, LCD_E_Pin, HIGH) ;
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	63 e0       	ldi	r22, 0x03	; 3
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
 682:	8f e3       	ldi	r24, 0x3F	; 63
 684:	9f e1       	ldi	r25, 0x1F	; 31
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <PulseEnable+0xe>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <PulseEnable+0x14>
 68c:	00 00       	nop
	_delay_ms(2) ;
	DIO_void_Set_pin_val(LCD_E_PORT, LCD_E_Pin, LOW) ;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	63 e0       	ldi	r22, 0x03	; 3
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
	
}
 698:	08 95       	ret

0000069a <LCD_void_Send_Data>:

void LCD_void_Send_Data(u8 data)
{
 69a:	cf 93       	push	r28
 69c:	c8 2f       	mov	r28, r24
	/* 1- set RS high for send data */
	DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_Pin,HIGH) ;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
	/* 2- set RW low for Write  */
	DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_Pin,LOW) ;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	62 e0       	ldi	r22, 0x02	; 2
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,HIGH) ;
	_delay_ms(2) ;
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,LOW) ;
	#elif LCD_MODE == FOUR_BIT_MODE
	/* Send HSB  */
	Send4bits(data>>4) ;
 6b2:	8c 2f       	mov	r24, r28
 6b4:	82 95       	swap	r24
 6b6:	8f 70       	andi	r24, 0x0F	; 15
 6b8:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
	PulseEnable() ;
 6bc:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	/* Send LSB */
	Send4bits(data) ;
 6c0:	8c 2f       	mov	r24, r28
 6c2:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
	PulseEnable() ;
 6c6:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	
	#endif
	
	
}
 6ca:	cf 91       	pop	r28
 6cc:	08 95       	ret

000006ce <LCD_void_Send_Command>:
void LCD_void_Send_Command(u8 command){
 6ce:	cf 93       	push	r28
 6d0:	c8 2f       	mov	r28, r24
	
      /* 1- set RS low for send command */ 
		DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_Pin,LOW) ;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
     /* 2- set RW low for Write  */
	    DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_Pin,LOW) ;
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	62 e0       	ldi	r22, 0x02	; 2
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <DIO_void_Set_pin_val>
	     DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,HIGH) ;
	     _delay_ms(2) ;
	     DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,LOW) ;
	     #elif LCD_MODE == FOUR_BIT_MODE
	     /* Send HSB  */
	     Send4bits(command>>4) ;
 6e6:	8c 2f       	mov	r24, r28
 6e8:	82 95       	swap	r24
 6ea:	8f 70       	andi	r24, 0x0F	; 15
 6ec:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
	     PulseEnable() ;
 6f0:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	     /* Send LSB */
	     Send4bits(command) ;
 6f4:	8c 2f       	mov	r24, r28
 6f6:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
	     PulseEnable() ;
 6fa:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	     #endif
}
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <LCD_void_init>:
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	93 ef       	ldi	r25, 0xF3	; 243
 706:	a1 e0       	ldi	r26, 0x01	; 1
 708:	81 50       	subi	r24, 0x01	; 1
 70a:	90 40       	sbci	r25, 0x00	; 0
 70c:	a0 40       	sbci	r26, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <LCD_void_init+0x6>
 710:	00 c0       	rjmp	.+0      	; 0x712 <LCD_void_init+0x10>
 712:	00 00       	nop
	_delay_ms(40) ;
	#if LCD_MODE == EIGHT_BIT_MODE
	 // Send function set command 
	LCD_void_Send_Command(0b00111000) ;
	#elif LCD_MODE == FOUR_BIT_MODE
	   Send4bits(0b0010) ;
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
	   PulseEnable() ;
 71a:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	   Send4bits(0b0010) ;
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
	   PulseEnable() ;
 724:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	   Send4bits(0b1000) ;
 728:	88 e0       	ldi	r24, 0x08	; 8
 72a:	0e 94 00 03 	call	0x600	; 0x600 <Send4bits>
       PulseEnable() ;
 72e:	0e 94 3c 03 	call	0x678	; 0x678 <PulseEnable>
	  #endif 
	 // Display on/ off control  
	LCD_void_Send_Command(0b00001100) ;
 732:	8c e0       	ldi	r24, 0x0C	; 12
 734:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
	// Display clear  
	LCD_void_Send_Command(1) ;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	0e 94 67 03 	call	0x6ce	; 0x6ce <LCD_void_Send_Command>
}
 73e:	08 95       	ret

00000740 <LCD_void_Send_String>:

void LCD_void_Send_String(u8 str[]) 
{
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	8c 01       	movw	r16, r24
	u8 i = 0;
	while(str[i] != '\0')
 748:	fc 01       	movw	r30, r24
 74a:	80 81       	ld	r24, Z
 74c:	88 23       	and	r24, r24
 74e:	51 f0       	breq	.+20     	; 0x764 <LCD_void_Send_String+0x24>
	LCD_void_Send_Command(1) ;
}

void LCD_void_Send_String(u8 str[]) 
{
	u8 i = 0;
 750:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_void_Send_Data(str[i]);
 752:	0e 94 4d 03 	call	0x69a	; 0x69a <LCD_void_Send_Data>
		i++;
 756:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_void_Send_String(u8 str[]) 
{
	u8 i = 0;
	while(str[i] != '\0')
 758:	f8 01       	movw	r30, r16
 75a:	ec 0f       	add	r30, r28
 75c:	f1 1d       	adc	r31, r1
 75e:	80 81       	ld	r24, Z
 760:	88 23       	and	r24, r24
 762:	b9 f7       	brne	.-18     	; 0x752 <LCD_void_Send_String+0x12>
	{
		LCD_void_Send_Data(str[i]);
		i++;
	}
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>

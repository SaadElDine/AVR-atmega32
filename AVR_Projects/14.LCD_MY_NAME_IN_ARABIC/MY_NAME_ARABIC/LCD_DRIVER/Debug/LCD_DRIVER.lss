
LCD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000968  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000968  000009dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001170  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd0  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000408  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000078a  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  00002d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009f6  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003a8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  8a:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_void_Set_pin_dir>:
#include "DIO_Address.h"
#include "DIO_Interface.h"


void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin, u8 copy_u8_dir) {
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
  92:	68 30       	cpi	r22, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_void_Set_pin_dir+0x6>
  96:	81 c0       	rjmp	.+258    	; 0x19a <DIO_void_Set_pin_dir+0x108>
	{
		if (copy_u8_dir == OUTPUT)
  98:	41 30       	cpi	r20, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_void_Set_pin_dir+0xc>
  9c:	3e c0       	rjmp	.+124    	; 0x11a <DIO_void_Set_pin_dir+0x88>
		{
			switch (copy_u8_port)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	a9 f0       	breq	.+42     	; 0xcc <DIO_void_Set_pin_dir+0x3a>
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	30 f0       	brcs	.+12     	; 0xb2 <DIO_void_Set_pin_dir+0x20>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	f1 f0       	breq	.+60     	; 0xe6 <DIO_void_Set_pin_dir+0x54>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	09 f0       	breq	.+2      	; 0xb0 <DIO_void_Set_pin_dir+0x1e>
  ae:	75 c0       	rjmp	.+234    	; 0x19a <DIO_void_Set_pin_dir+0x108>
  b0:	27 c0       	rjmp	.+78     	; 0x100 <DIO_void_Set_pin_dir+0x6e>
			{
				case PORTA: SET_BIT(DDRA_REG, copy_u8_pin); break;
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	ac 01       	movw	r20, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_void_Set_pin_dir+0x2e>
  bc:	44 0f       	add	r20, r20
  be:	55 1f       	adc	r21, r21
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_void_Set_pin_dir+0x2a>
  c4:	ba 01       	movw	r22, r20
  c6:	62 2b       	or	r22, r18
  c8:	6a bb       	out	0x1a, r22	; 26
  ca:	08 95       	ret
				case PORTB: SET_BIT(DDRB_REG, copy_u8_pin); break;
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	ac 01       	movw	r20, r24
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_void_Set_pin_dir+0x48>
  d6:	44 0f       	add	r20, r20
  d8:	55 1f       	adc	r21, r21
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_void_Set_pin_dir+0x44>
  de:	ba 01       	movw	r22, r20
  e0:	62 2b       	or	r22, r18
  e2:	67 bb       	out	0x17, r22	; 23
  e4:	08 95       	ret
				case PORTC: SET_BIT(DDRC_REG, copy_u8_pin); break;
  e6:	24 b3       	in	r18, 0x14	; 20
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_void_Set_pin_dir+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_void_Set_pin_dir+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	64 bb       	out	0x14, r22	; 20
  fe:	08 95       	ret
				case PORTD: SET_BIT(DDRD_REG, copy_u8_pin); break;
 100:	21 b3       	in	r18, 0x11	; 17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_void_Set_pin_dir+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_void_Set_pin_dir+0x78>
 112:	ba 01       	movw	r22, r20
 114:	62 2b       	or	r22, r18
 116:	61 bb       	out	0x11, r22	; 17
 118:	08 95       	ret
			}
		}			
		else
		{
			switch (copy_u8_port)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	a9 f0       	breq	.+42     	; 0x148 <DIO_void_Set_pin_dir+0xb6>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	28 f0       	brcs	.+10     	; 0x12c <DIO_void_Set_pin_dir+0x9a>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	f9 f0       	breq	.+62     	; 0x164 <DIO_void_Set_pin_dir+0xd2>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	c1 f5       	brne	.+112    	; 0x19a <DIO_void_Set_pin_dir+0x108>
 12a:	2a c0       	rjmp	.+84     	; 0x180 <DIO_void_Set_pin_dir+0xee>
			{
				case PORTA: CLR_BIT(DDRA_REG, copy_u8_pin); break;
 12c:	2a b3       	in	r18, 0x1a	; 26
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_void_Set_pin_dir+0xa8>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_void_Set_pin_dir+0xa4>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	6a bb       	out	0x1a, r22	; 26
 146:	08 95       	ret
				case PORTB: CLR_BIT(DDRB_REG, copy_u8_pin); break;
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_void_Set_pin_dir+0xc4>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_void_Set_pin_dir+0xc0>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
				case PORTC: CLR_BIT(DDRC_REG, copy_u8_pin); break;
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	ac 01       	movw	r20, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_void_Set_pin_dir+0xe0>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_void_Set_pin_dir+0xdc>
 176:	ba 01       	movw	r22, r20
 178:	60 95       	com	r22
 17a:	62 23       	and	r22, r18
 17c:	64 bb       	out	0x14, r22	; 20
 17e:	08 95       	ret
				case PORTD: CLR_BIT(DDRD_REG, copy_u8_pin); break;
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ac 01       	movw	r20, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_void_Set_pin_dir+0xfc>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_void_Set_pin_dir+0xf8>
 192:	ba 01       	movw	r22, r20
 194:	60 95       	com	r22
 196:	62 23       	and	r22, r18
 198:	61 bb       	out	0x11, r22	; 17
 19a:	08 95       	ret

0000019c <DIO_void_Set_pin_val>:
	}
}

void DIO_void_Set_pin_val(u8 copy_u8_port, u8 copy_u8_pin, u8 copy_u8_val)
{
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 19c:	68 30       	cpi	r22, 0x08	; 8
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <DIO_void_Set_pin_val+0x6>
 1a0:	81 c0       	rjmp	.+258    	; 0x2a4 <DIO_void_Set_pin_val+0x108>
	{
		if (copy_u8_val == OUTPUT)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <DIO_void_Set_pin_val+0xc>
 1a6:	3e c0       	rjmp	.+124    	; 0x224 <DIO_void_Set_pin_val+0x88>
		{
			switch (copy_u8_port)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	a9 f0       	breq	.+42     	; 0x1d6 <DIO_void_Set_pin_val+0x3a>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	30 f0       	brcs	.+12     	; 0x1bc <DIO_void_Set_pin_val+0x20>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	f1 f0       	breq	.+60     	; 0x1f0 <DIO_void_Set_pin_val+0x54>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	09 f0       	breq	.+2      	; 0x1ba <DIO_void_Set_pin_val+0x1e>
 1b8:	75 c0       	rjmp	.+234    	; 0x2a4 <DIO_void_Set_pin_val+0x108>
 1ba:	27 c0       	rjmp	.+78     	; 0x20a <DIO_void_Set_pin_val+0x6e>
			{
				case PORTA: SET_BIT(PORTA_REG, copy_u8_pin); break;
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	ac 01       	movw	r20, r24
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_void_Set_pin_val+0x2e>
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_void_Set_pin_val+0x2a>
 1ce:	ba 01       	movw	r22, r20
 1d0:	62 2b       	or	r22, r18
 1d2:	6b bb       	out	0x1b, r22	; 27
 1d4:	08 95       	ret
				case PORTB: SET_BIT(PORTB_REG, copy_u8_pin); break;
 1d6:	28 b3       	in	r18, 0x18	; 24
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_void_Set_pin_val+0x48>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_void_Set_pin_val+0x44>
 1e8:	ba 01       	movw	r22, r20
 1ea:	62 2b       	or	r22, r18
 1ec:	68 bb       	out	0x18, r22	; 24
 1ee:	08 95       	ret
				case PORTC: SET_BIT(PORTC_REG, copy_u8_pin); break;
 1f0:	25 b3       	in	r18, 0x15	; 21
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_void_Set_pin_val+0x62>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_void_Set_pin_val+0x5e>
 202:	ba 01       	movw	r22, r20
 204:	62 2b       	or	r22, r18
 206:	65 bb       	out	0x15, r22	; 21
 208:	08 95       	ret
				case PORTD: SET_BIT(PORTD_REG, copy_u8_pin); break;
 20a:	22 b3       	in	r18, 0x12	; 18
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	ac 01       	movw	r20, r24
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_void_Set_pin_val+0x7c>
 214:	44 0f       	add	r20, r20
 216:	55 1f       	adc	r21, r21
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_void_Set_pin_val+0x78>
 21c:	ba 01       	movw	r22, r20
 21e:	62 2b       	or	r22, r18
 220:	62 bb       	out	0x12, r22	; 18
 222:	08 95       	ret
			}
		}			
		else
		{
			switch (copy_u8_port)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	a9 f0       	breq	.+42     	; 0x252 <DIO_void_Set_pin_val+0xb6>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	28 f0       	brcs	.+10     	; 0x236 <DIO_void_Set_pin_val+0x9a>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	f9 f0       	breq	.+62     	; 0x26e <DIO_void_Set_pin_val+0xd2>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	c1 f5       	brne	.+112    	; 0x2a4 <DIO_void_Set_pin_val+0x108>
 234:	2a c0       	rjmp	.+84     	; 0x28a <DIO_void_Set_pin_val+0xee>
			{
				case PORTA: CLR_BIT(PORTA_REG, copy_u8_pin); break;
 236:	2b b3       	in	r18, 0x1b	; 27
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_void_Set_pin_val+0xa8>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_void_Set_pin_val+0xa4>
 248:	ba 01       	movw	r22, r20
 24a:	60 95       	com	r22
 24c:	62 23       	and	r22, r18
 24e:	6b bb       	out	0x1b, r22	; 27
 250:	08 95       	ret
				case PORTB: CLR_BIT(PORTB_REG, copy_u8_pin); break;
 252:	28 b3       	in	r18, 0x18	; 24
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	ac 01       	movw	r20, r24
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_void_Set_pin_val+0xc4>
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_void_Set_pin_val+0xc0>
 264:	ba 01       	movw	r22, r20
 266:	60 95       	com	r22
 268:	62 23       	and	r22, r18
 26a:	68 bb       	out	0x18, r22	; 24
 26c:	08 95       	ret
				case PORTC: CLR_BIT(PORTC_REG, copy_u8_pin); break;
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ac 01       	movw	r20, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_void_Set_pin_val+0xe0>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_void_Set_pin_val+0xdc>
 280:	ba 01       	movw	r22, r20
 282:	60 95       	com	r22
 284:	62 23       	and	r22, r18
 286:	65 bb       	out	0x15, r22	; 21
 288:	08 95       	ret
				case PORTD: CLR_BIT(PORTD_REG, copy_u8_pin); break;
 28a:	22 b3       	in	r18, 0x12	; 18
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	ac 01       	movw	r20, r24
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_void_Set_pin_val+0xfc>
 294:	44 0f       	add	r20, r20
 296:	55 1f       	adc	r21, r21
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_void_Set_pin_val+0xf8>
 29c:	ba 01       	movw	r22, r20
 29e:	60 95       	com	r22
 2a0:	62 23       	and	r22, r18
 2a2:	62 bb       	out	0x12, r22	; 18
 2a4:	08 95       	ret

000002a6 <DIO_void_Toggle_pin_val>:
	
}

void DIO_void_Toggle_pin_val(u8 copy_u8_port, u8 copy_u8_pin)
{
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 2a6:	68 30       	cpi	r22, 0x08	; 8
 2a8:	08 f0       	brcs	.+2      	; 0x2ac <DIO_void_Toggle_pin_val+0x6>
 2aa:	3c c0       	rjmp	.+120    	; 0x324 <DIO_void_Toggle_pin_val+0x7e>
	{
		switch (copy_u8_port)
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	a1 f0       	breq	.+40     	; 0x2d8 <DIO_void_Toggle_pin_val+0x32>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	28 f0       	brcs	.+10     	; 0x2be <DIO_void_Toggle_pin_val+0x18>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	e9 f0       	breq	.+58     	; 0x2f2 <DIO_void_Toggle_pin_val+0x4c>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	a1 f5       	brne	.+104    	; 0x324 <DIO_void_Toggle_pin_val+0x7e>
 2bc:	27 c0       	rjmp	.+78     	; 0x30c <DIO_void_Toggle_pin_val+0x66>
		{
			case PORTA: TOGGLE_BIT(PORTA_REG, copy_u8_pin); break;
 2be:	2b b3       	in	r18, 0x1b	; 27
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_void_Toggle_pin_val+0x26>
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_void_Toggle_pin_val+0x22>
 2d0:	ba 01       	movw	r22, r20
 2d2:	62 27       	eor	r22, r18
 2d4:	6b bb       	out	0x1b, r22	; 27
 2d6:	08 95       	ret
			case PORTB: TOGGLE_BIT(PORTB_REG, copy_u8_pin); break;
 2d8:	28 b3       	in	r18, 0x18	; 24
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ac 01       	movw	r20, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_void_Toggle_pin_val+0x40>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_void_Toggle_pin_val+0x3c>
 2ea:	ba 01       	movw	r22, r20
 2ec:	62 27       	eor	r22, r18
 2ee:	68 bb       	out	0x18, r22	; 24
 2f0:	08 95       	ret
			case PORTC: TOGGLE_BIT(PORTC_REG, copy_u8_pin); break;
 2f2:	25 b3       	in	r18, 0x15	; 21
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ac 01       	movw	r20, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_void_Toggle_pin_val+0x5a>
 2fc:	44 0f       	add	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_void_Toggle_pin_val+0x56>
 304:	ba 01       	movw	r22, r20
 306:	62 27       	eor	r22, r18
 308:	65 bb       	out	0x15, r22	; 21
 30a:	08 95       	ret
			case PORTD: TOGGLE_BIT(PORTD_REG, copy_u8_pin); break;
 30c:	22 b3       	in	r18, 0x12	; 18
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	ac 01       	movw	r20, r24
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_void_Toggle_pin_val+0x74>
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_void_Toggle_pin_val+0x70>
 31e:	ba 01       	movw	r22, r20
 320:	62 27       	eor	r22, r18
 322:	62 bb       	out	0x12, r22	; 18
 324:	08 95       	ret

00000326 <DIO_void_Get_pin_val>:
}

u8	 DIO_void_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin) 
{
	u8 LOC_u8_val = 0;
	if(copy_u8_pin <= 7 && copy_u8_pin >=0)
 326:	68 30       	cpi	r22, 0x08	; 8
 328:	98 f5       	brcc	.+102    	; 0x390 <DIO_void_Get_pin_val+0x6a>
	{
		switch(copy_u8_port)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	89 f0       	breq	.+34     	; 0x350 <DIO_void_Get_pin_val+0x2a>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	28 f0       	brcs	.+10     	; 0x33c <DIO_void_Get_pin_val+0x16>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	b9 f0       	breq	.+46     	; 0x364 <DIO_void_Get_pin_val+0x3e>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	49 f5       	brne	.+82     	; 0x38c <DIO_void_Get_pin_val+0x66>
 33a:	1e c0       	rjmp	.+60     	; 0x378 <DIO_void_Get_pin_val+0x52>
		{
			case PORTA: LOC_u8_val = GET_BIT(PINA_REG, copy_u8_pin); break;
 33c:	29 b3       	in	r18, 0x19	; 25
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	c9 01       	movw	r24, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_void_Get_pin_val+0x22>
 344:	95 95       	asr	r25
 346:	87 95       	ror	r24
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_void_Get_pin_val+0x1e>
 34c:	81 70       	andi	r24, 0x01	; 1
 34e:	08 95       	ret
			case PORTB: LOC_u8_val = GET_BIT(PINB_REG, copy_u8_pin); break;
 350:	26 b3       	in	r18, 0x16	; 22
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	c9 01       	movw	r24, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_void_Get_pin_val+0x36>
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_void_Get_pin_val+0x32>
 360:	81 70       	andi	r24, 0x01	; 1
 362:	08 95       	ret
			case PORTC: LOC_u8_val = GET_BIT(PINC_REG, copy_u8_pin); break;
 364:	23 b3       	in	r18, 0x13	; 19
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	c9 01       	movw	r24, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_void_Get_pin_val+0x4a>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_void_Get_pin_val+0x46>
 374:	81 70       	andi	r24, 0x01	; 1
 376:	08 95       	ret
			case PORTD: LOC_u8_val = GET_BIT(PIND_REG, copy_u8_pin); break;
 378:	20 b3       	in	r18, 0x10	; 16
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	c9 01       	movw	r24, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_void_Get_pin_val+0x5e>
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_void_Get_pin_val+0x5a>
 388:	81 70       	andi	r24, 0x01	; 1
 38a:	08 95       	ret
	}
}

u8	 DIO_void_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin) 
{
	u8 LOC_u8_val = 0;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
			case PORTC: LOC_u8_val = GET_BIT(PINC_REG, copy_u8_pin); break;
			case PORTD: LOC_u8_val = GET_BIT(PIND_REG, copy_u8_pin); break;
		}
		return LOC_u8_val;
	}
}
 390:	08 95       	ret

00000392 <DIO_void_Set_port_dir>:

void DIO_void_Set_port_dir(u8 copy_u8_port, u8 copy_u8_dir)
{
		switch (copy_u8_port)
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	49 f0       	breq	.+18     	; 0x3a8 <DIO_void_Set_port_dir+0x16>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	28 f0       	brcs	.+10     	; 0x3a4 <DIO_void_Set_port_dir+0x12>
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	39 f0       	breq	.+14     	; 0x3ac <DIO_void_Set_port_dir+0x1a>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	41 f4       	brne	.+16     	; 0x3b2 <DIO_void_Set_port_dir+0x20>
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <DIO_void_Set_port_dir+0x1e>
		{
			case PORTA: DDRA_REG = copy_u8_dir; break;
 3a4:	6a bb       	out	0x1a, r22	; 26
 3a6:	08 95       	ret
			case PORTB: DDRB_REG = copy_u8_dir; break;
 3a8:	67 bb       	out	0x17, r22	; 23
 3aa:	08 95       	ret
			case PORTC: DDRC_REG = copy_u8_dir; break;
 3ac:	64 bb       	out	0x14, r22	; 20
 3ae:	08 95       	ret
			case PORTD: DDRD_REG = copy_u8_dir; break;
 3b0:	61 bb       	out	0x11, r22	; 17
 3b2:	08 95       	ret

000003b4 <DIO_void_Set_port_val>:
		}
}

void DIO_void_Set_port_val(u8 copy_u8_port, u8 copy_u8_val)
{
		switch (copy_u8_port)
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	49 f0       	breq	.+18     	; 0x3ca <DIO_void_Set_port_val+0x16>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <DIO_void_Set_port_val+0x12>
 3bc:	82 30       	cpi	r24, 0x02	; 2
 3be:	39 f0       	breq	.+14     	; 0x3ce <DIO_void_Set_port_val+0x1a>
 3c0:	83 30       	cpi	r24, 0x03	; 3
 3c2:	41 f4       	brne	.+16     	; 0x3d4 <DIO_void_Set_port_val+0x20>
 3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <DIO_void_Set_port_val+0x1e>
		{
			case PORTA: PORTA_REG = copy_u8_val; break;
 3c6:	6b bb       	out	0x1b, r22	; 27
 3c8:	08 95       	ret
			case PORTB: PORTB_REG = copy_u8_val; break;
 3ca:	68 bb       	out	0x18, r22	; 24
 3cc:	08 95       	ret
			case PORTC: PORTC_REG = copy_u8_val; break;
 3ce:	65 bb       	out	0x15, r22	; 21
 3d0:	08 95       	ret
			case PORTD: PORTD_REG = copy_u8_val; break;
 3d2:	62 bb       	out	0x12, r22	; 18
 3d4:	08 95       	ret

000003d6 <main>:
#include "LCD_Interface.h"
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	c0 54       	subi	r28, 0x40	; 64
 3e0:	d0 40       	sbci	r29, 0x00	; 0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D4,OUTPUT) ;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	64 e0       	ldi	r22, 0x04	; 4
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D5,OUTPUT) ;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	65 e0       	ldi	r22, 0x05	; 5
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D6,OUTPUT) ;
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	66 e0       	ldi	r22, 0x06	; 6
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_DPORT,LCD_D7,OUTPUT) ;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	67 e0       	ldi	r22, 0x07	; 7
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
		 	 
	DIO_void_Set_pin_dir(LCD_RS_PORT,LCD_RS_Pin,OUTPUT) ;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_RW_PORT,LCD_RW_Pin,OUTPUT) ;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_E_PORT,LCD_E_Pin,OUTPUT) ;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_void_Set_pin_dir>
		 
	LCD_void_init() ;
 432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_void_init>
	u8 Heart[8] = {0B00000, 0B01010, 0B11111, 0B11111, 0B01110, 0B00100, 0B00000, 0B00000};
 436:	de 01       	movw	r26, r28
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	e0 e6       	ldi	r30, 0x60	; 96
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	88 e0       	ldi	r24, 0x08	; 8
 440:	01 90       	ld	r0, Z+
 442:	0d 92       	st	X+, r0
 444:	81 50       	subi	r24, 0x01	; 1
 446:	e1 f7       	brne	.-8      	; 0x440 <main+0x6a>
	u8 seeen[8] = {
 448:	de 01       	movw	r26, r28
 44a:	19 96       	adiw	r26, 0x09	; 9
 44c:	e8 e6       	ldi	r30, 0x68	; 104
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	01 90       	ld	r0, Z+
 454:	0d 92       	st	X+, r0
 456:	81 50       	subi	r24, 0x01	; 1
 458:	e1 f7       	brne	.-8      	; 0x452 <main+0x7c>
					0b10101,
					0b10101,
					0b11111,
					0b00000
				  };
	u8 een[8] = {
 45a:	de 01       	movw	r26, r28
 45c:	51 96       	adiw	r26, 0x11	; 17
 45e:	e0 e7       	ldi	r30, 0x70	; 112
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	01 90       	ld	r0, Z+
 466:	0d 92       	st	X+, r0
 468:	81 50       	subi	r24, 0x01	; 1
 46a:	e1 f7       	brne	.-8      	; 0x464 <main+0x8e>
					0b00010,
					0b11111,
					0b00000
				};
				
	u8 daaal[8] = {
 46c:	de 01       	movw	r26, r28
 46e:	59 96       	adiw	r26, 0x19	; 25
 470:	e8 e7       	ldi	r30, 0x78	; 120
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	88 e0       	ldi	r24, 0x08	; 8
 476:	01 90       	ld	r0, Z+
 478:	0d 92       	st	X+, r0
 47a:	81 50       	subi	r24, 0x01	; 1
 47c:	e1 f7       	brne	.-8      	; 0x476 <main+0xa0>
		0b00001,
		0b11110,
		0b00000
	};
	
	u8 alef[8] = {
 47e:	de 01       	movw	r26, r28
 480:	91 96       	adiw	r26, 0x21	; 33
 482:	e0 e8       	ldi	r30, 0x80	; 128
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	01 90       	ld	r0, Z+
 48a:	0d 92       	st	X+, r0
 48c:	81 50       	subi	r24, 0x01	; 1
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0xb2>
		0b00100,
		0b00100,
		0b00000
	};
		
	u8 lam[8] = {
 490:	de 01       	movw	r26, r28
 492:	99 96       	adiw	r26, 0x29	; 41
 494:	e8 e8       	ldi	r30, 0x88	; 136
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	88 e0       	ldi	r24, 0x08	; 8
 49a:	01 90       	ld	r0, Z+
 49c:	0d 92       	st	X+, r0
 49e:	81 50       	subi	r24, 0x01	; 1
 4a0:	e1 f7       	brne	.-8      	; 0x49a <main+0xc4>
		0b00001,
		0b11111,
		0b00000
	};	
	
	u8 yeh[8] = {
 4a2:	de 01       	movw	r26, r28
 4a4:	d1 96       	adiw	r26, 0x31	; 49
 4a6:	e0 e9       	ldi	r30, 0x90	; 144
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	88 e0       	ldi	r24, 0x08	; 8
 4ac:	01 90       	ld	r0, Z+
 4ae:	0d 92       	st	X+, r0
 4b0:	81 50       	subi	r24, 0x01	; 1
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <main+0xd6>
		0b00001,
		0b11110,
		0b01100
	};
	
	u8 noon[8] = {
 4b4:	de 01       	movw	r26, r28
 4b6:	d9 96       	adiw	r26, 0x39	; 57
 4b8:	e8 e9       	ldi	r30, 0x98	; 152
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	88 e0       	ldi	r24, 0x08	; 8
 4be:	01 90       	ld	r0, Z+
 4c0:	0d 92       	st	X+, r0
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	e1 f7       	brne	.-8      	; 0x4be <main+0xe8>
		0b10001,
		0b01110,
		0b00000
	};
		
	LCD_void_Send_Custom_Char(Heart, 0);
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(seeen, 1);
 4d0:	ce 01       	movw	r24, r28
 4d2:	09 96       	adiw	r24, 0x09	; 9
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(een, 2);
 4da:	ce 01       	movw	r24, r28
 4dc:	41 96       	adiw	r24, 0x11	; 17
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(daaal, 3);
 4e4:	ce 01       	movw	r24, r28
 4e6:	49 96       	adiw	r24, 0x19	; 25
 4e8:	63 e0       	ldi	r22, 0x03	; 3
 4ea:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(alef, 4);
 4ee:	ce 01       	movw	r24, r28
 4f0:	81 96       	adiw	r24, 0x21	; 33
 4f2:	64 e0       	ldi	r22, 0x04	; 4
 4f4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(lam, 5);
 4f8:	ce 01       	movw	r24, r28
 4fa:	89 96       	adiw	r24, 0x29	; 41
 4fc:	65 e0       	ldi	r22, 0x05	; 5
 4fe:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(yeh, 6);
 502:	ce 01       	movw	r24, r28
 504:	c1 96       	adiw	r24, 0x31	; 49
 506:	66 e0       	ldi	r22, 0x06	; 6
 508:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
	LCD_void_Send_Custom_Char(noon, 7);
 50c:	ce 01       	movw	r24, r28
 50e:	c9 96       	adiw	r24, 0x39	; 57
 510:	67 e0       	ldi	r22, 0x07	; 7
 512:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_void_Send_Custom_Char>
    while(1)
    {
		LCD_void_Send_Data(' ');
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(3);
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(2);
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(1);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_ShiftDown();
 52e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_ShiftDown>
		LCD_void_Send_Data(7);
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(6);
 538:	86 e0       	ldi	r24, 0x06	; 6
 53a:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(3);
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(5);
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		LCD_void_Send_Data(4);
 54a:	84 e0       	ldi	r24, 0x04	; 4
 54c:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	8a ea       	ldi	r24, 0xAA	; 170
 552:	96 ee       	ldi	r25, 0xE6	; 230
 554:	a6 e9       	ldi	r26, 0x96	; 150
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	81 50       	subi	r24, 0x01	; 1
 55a:	90 40       	sbci	r25, 0x00	; 0
 55c:	a0 40       	sbci	r26, 0x00	; 0
 55e:	b0 40       	sbci	r27, 0x00	; 0
 560:	d9 f7       	brne	.-10     	; 0x558 <main+0x182>
 562:	00 00       	nop
		_delay_ms(10000);
		LCD_Clear();
 564:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_Clear>
 568:	d6 cf       	rjmp	.-84     	; 0x516 <main+0x140>

0000056a <Send4bits>:
		case 9: LCD_void_Send_Data(57); break;
	}
}

static void Send4bits(u8 data)
{	
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	00 d0       	rcall	.+0      	; 0x57c <Send4bits+0x12>
 57c:	00 d0       	rcall	.+0      	; 0x57e <Send4bits+0x14>
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
	u8 loc_DPIN[4]={LCD_D4,LCD_D5,LCD_D6,LCD_D7} ;
 582:	94 e0       	ldi	r25, 0x04	; 4
 584:	99 83       	std	Y+1, r25	; 0x01
 586:	95 e0       	ldi	r25, 0x05	; 5
 588:	9a 83       	std	Y+2, r25	; 0x02
 58a:	96 e0       	ldi	r25, 0x06	; 6
 58c:	9b 83       	std	Y+3, r25	; 0x03
 58e:	97 e0       	ldi	r25, 0x07	; 7
 590:	9c 83       	std	Y+4, r25	; 0x04
 592:	7e 01       	movw	r14, r28
 594:	08 94       	sec
 596:	e1 1c       	adc	r14, r1
 598:	f1 1c       	adc	r15, r1
 59a:	00 e0       	ldi	r16, 0x00	; 0
 59c:	10 e0       	ldi	r17, 0x00	; 0
	u8 loc_iterator = 0 ;
	for(loc_iterator=0; loc_iterator < 4 ;loc_iterator++)
	{
		DIO_void_Set_pin_val(LCD_DPORT,loc_DPIN[loc_iterator],GET_BIT(data,loc_iterator)) ;
 59e:	c8 2e       	mov	r12, r24
 5a0:	dd 24       	eor	r13, r13
 5a2:	f7 01       	movw	r30, r14
 5a4:	61 91       	ld	r22, Z+
 5a6:	7f 01       	movw	r14, r30
 5a8:	a6 01       	movw	r20, r12
 5aa:	00 2e       	mov	r0, r16
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Send4bits+0x48>
 5ae:	55 95       	asr	r21
 5b0:	47 95       	ror	r20
 5b2:	0a 94       	dec	r0
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Send4bits+0x44>
 5b6:	41 70       	andi	r20, 0x01	; 1
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
 5be:	0f 5f       	subi	r16, 0xFF	; 255
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255

static void Send4bits(u8 data)
{	
	u8 loc_DPIN[4]={LCD_D4,LCD_D5,LCD_D6,LCD_D7} ;
	u8 loc_iterator = 0 ;
	for(loc_iterator=0; loc_iterator < 4 ;loc_iterator++)
 5c2:	04 30       	cpi	r16, 0x04	; 4
 5c4:	11 05       	cpc	r17, r1
 5c6:	69 f7       	brne	.-38     	; 0x5a2 <Send4bits+0x38>
	{
		DIO_void_Set_pin_val(LCD_DPORT,loc_DPIN[loc_iterator],GET_BIT(data,loc_iterator)) ;
	}
}
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	ff 90       	pop	r15
 5da:	ef 90       	pop	r14
 5dc:	df 90       	pop	r13
 5de:	cf 90       	pop	r12
 5e0:	08 95       	ret

000005e2 <PulseEnable>:

static void PulseEnable(void)
{
	DIO_void_Set_pin_val(LCD_E_PORT, LCD_E_Pin, HIGH) ;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	63 e0       	ldi	r22, 0x03	; 3
 5e6:	41 e0       	ldi	r20, 0x01	; 1
 5e8:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
 5ec:	8f e3       	ldi	r24, 0x3F	; 63
 5ee:	9f e1       	ldi	r25, 0x1F	; 31
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <PulseEnable+0xe>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <PulseEnable+0x14>
 5f6:	00 00       	nop
	_delay_ms(2) ;
	DIO_void_Set_pin_val(LCD_E_PORT, LCD_E_Pin, LOW) ;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	63 e0       	ldi	r22, 0x03	; 3
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
	
}
 602:	08 95       	ret

00000604 <LCD_void_Send_Data>:

void LCD_void_Send_Data(u8 data)
{
 604:	cf 93       	push	r28
 606:	c8 2f       	mov	r28, r24
	/* 1- set RS high for send data */
	DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_Pin,HIGH) ;
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
	/* 2- set RW low for Write  */
	DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_Pin,LOW) ;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	62 e0       	ldi	r22, 0x02	; 2
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,HIGH) ;
	_delay_ms(2) ;
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,LOW) ;
	#elif LCD_MODE == FOUR_BIT_MODE
	/* Send HSB  */
	Send4bits(data>>4) ;
 61c:	8c 2f       	mov	r24, r28
 61e:	82 95       	swap	r24
 620:	8f 70       	andi	r24, 0x0F	; 15
 622:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
	PulseEnable() ;
 626:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	/* Send LSB */
	Send4bits(data) ;
 62a:	8c 2f       	mov	r24, r28
 62c:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
	PulseEnable() ;
 630:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	
	#endif
	
	
}
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <sendDigit>:
#define F_CPU 16000000UL
#include <util/delay.h>

static void sendDigit(u8 digit)
{
	switch(digit)
 638:	84 30       	cpi	r24, 0x04	; 4
 63a:	49 f1       	breq	.+82     	; 0x68e <sendDigit+0x56>
 63c:	85 30       	cpi	r24, 0x05	; 5
 63e:	48 f4       	brcc	.+18     	; 0x652 <sendDigit+0x1a>
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	c9 f0       	breq	.+50     	; 0x676 <sendDigit+0x3e>
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	98 f0       	brcs	.+38     	; 0x66e <sendDigit+0x36>
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	c9 f0       	breq	.+50     	; 0x67e <sendDigit+0x46>
 64c:	83 30       	cpi	r24, 0x03	; 3
 64e:	b1 f5       	brne	.+108    	; 0x6bc <sendDigit+0x84>
 650:	1a c0       	rjmp	.+52     	; 0x686 <sendDigit+0x4e>
 652:	87 30       	cpi	r24, 0x07	; 7
 654:	41 f1       	breq	.+80     	; 0x6a6 <sendDigit+0x6e>
 656:	88 30       	cpi	r24, 0x08	; 8
 658:	28 f4       	brcc	.+10     	; 0x664 <sendDigit+0x2c>
 65a:	85 30       	cpi	r24, 0x05	; 5
 65c:	e1 f0       	breq	.+56     	; 0x696 <sendDigit+0x5e>
 65e:	86 30       	cpi	r24, 0x06	; 6
 660:	69 f5       	brne	.+90     	; 0x6bc <sendDigit+0x84>
 662:	1d c0       	rjmp	.+58     	; 0x69e <sendDigit+0x66>
 664:	88 30       	cpi	r24, 0x08	; 8
 666:	19 f1       	breq	.+70     	; 0x6ae <sendDigit+0x76>
 668:	89 30       	cpi	r24, 0x09	; 9
 66a:	41 f5       	brne	.+80     	; 0x6bc <sendDigit+0x84>
 66c:	24 c0       	rjmp	.+72     	; 0x6b6 <sendDigit+0x7e>
	{
		case 0: LCD_void_Send_Data(48); break;
 66e:	80 e3       	ldi	r24, 0x30	; 48
 670:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 674:	08 95       	ret
		case 1: LCD_void_Send_Data(49); break;
 676:	81 e3       	ldi	r24, 0x31	; 49
 678:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 67c:	08 95       	ret
		case 2: LCD_void_Send_Data(50); break;
 67e:	82 e3       	ldi	r24, 0x32	; 50
 680:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 684:	08 95       	ret
		case 3: LCD_void_Send_Data(51); break;
 686:	83 e3       	ldi	r24, 0x33	; 51
 688:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 68c:	08 95       	ret
		case 4: LCD_void_Send_Data(52); break;
 68e:	84 e3       	ldi	r24, 0x34	; 52
 690:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 694:	08 95       	ret
		case 5: LCD_void_Send_Data(53); break;
 696:	85 e3       	ldi	r24, 0x35	; 53
 698:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 69c:	08 95       	ret
		case 6: LCD_void_Send_Data(54); break;
 69e:	86 e3       	ldi	r24, 0x36	; 54
 6a0:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 6a4:	08 95       	ret
		case 7: LCD_void_Send_Data(55); break;
 6a6:	87 e3       	ldi	r24, 0x37	; 55
 6a8:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 6ac:	08 95       	ret
		case 8: LCD_void_Send_Data(56); break;
 6ae:	88 e3       	ldi	r24, 0x38	; 56
 6b0:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 6b4:	08 95       	ret
		case 9: LCD_void_Send_Data(57); break;
 6b6:	89 e3       	ldi	r24, 0x39	; 57
 6b8:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 6bc:	08 95       	ret

000006be <LCD_void_Send_Command>:
	
	#endif
	
	
}
void LCD_void_Send_Command(u8 command){
 6be:	cf 93       	push	r28
 6c0:	c8 2f       	mov	r28, r24
	
      /* 1- set RS low for send command */ 
		DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_Pin,LOW) ;
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	61 e0       	ldi	r22, 0x01	; 1
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
     /* 2- set RW low for Write  */
	    DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_Pin,LOW) ;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	62 e0       	ldi	r22, 0x02	; 2
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_void_Set_pin_val>
	     DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,HIGH) ;
	     _delay_ms(2) ;
	     DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_Pin,LOW) ;
	     #elif LCD_MODE == FOUR_BIT_MODE
	     /* Send HSB  */
	     Send4bits(command>>4) ;
 6d6:	8c 2f       	mov	r24, r28
 6d8:	82 95       	swap	r24
 6da:	8f 70       	andi	r24, 0x0F	; 15
 6dc:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
	     PulseEnable() ;
 6e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	     /* Send LSB */
	     Send4bits(command) ;
 6e4:	8c 2f       	mov	r24, r28
 6e6:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
	     PulseEnable() ;
 6ea:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	     #endif
}
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <LCD_void_init>:
 6f2:	8f ef       	ldi	r24, 0xFF	; 255
 6f4:	93 ef       	ldi	r25, 0xF3	; 243
 6f6:	a1 e0       	ldi	r26, 0x01	; 1
 6f8:	81 50       	subi	r24, 0x01	; 1
 6fa:	90 40       	sbci	r25, 0x00	; 0
 6fc:	a0 40       	sbci	r26, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <LCD_void_init+0x6>
 700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_void_init+0x10>
 702:	00 00       	nop
	_delay_ms(40) ;
	#if LCD_MODE == EIGHT_BIT_MODE
	 // Send function set command 
	LCD_void_Send_Command(0b00111000) ;
	#elif LCD_MODE == FOUR_BIT_MODE
	   Send4bits(0b0010) ;
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
	   PulseEnable() ;
 70a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	   Send4bits(0b0010) ;
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
	   PulseEnable() ;
 714:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	   Send4bits(0b1000) ;
 718:	88 e0       	ldi	r24, 0x08	; 8
 71a:	0e 94 b5 02 	call	0x56a	; 0x56a <Send4bits>
       PulseEnable() ;
 71e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <PulseEnable>
	  #endif 
	 // Display on/ off control  
	LCD_void_Send_Command(0b00001100) ;
 722:	8c e0       	ldi	r24, 0x0C	; 12
 724:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
	// Display clear  
	LCD_void_Send_Command(1) ;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
}
 72e:	08 95       	ret

00000730 <LCD_void_Send_String>:

void LCD_void_Send_String(u8 str[]) 
{
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	8c 01       	movw	r16, r24
	u8 i = 0;
	while(str[i] != '\0')
 738:	fc 01       	movw	r30, r24
 73a:	80 81       	ld	r24, Z
 73c:	88 23       	and	r24, r24
 73e:	51 f0       	breq	.+20     	; 0x754 <LCD_void_Send_String+0x24>
	LCD_void_Send_Command(1) ;
}

void LCD_void_Send_String(u8 str[]) 
{
	u8 i = 0;
 740:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_void_Send_Data(str[i]);
 742:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		i++;
 746:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_void_Send_String(u8 str[]) 
{
	u8 i = 0;
	while(str[i] != '\0')
 748:	f8 01       	movw	r30, r16
 74a:	ec 0f       	add	r30, r28
 74c:	f1 1d       	adc	r31, r1
 74e:	80 81       	ld	r24, Z
 750:	88 23       	and	r24, r24
 752:	b9 f7       	brne	.-18     	; 0x742 <LCD_void_Send_String+0x12>
	{
		LCD_void_Send_Data(str[i]);
		i++;
	}
}
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <LCD_void_Send_Dynamic_String>:

void LCD_void_Send_Dynamic_String(u8 str[]) 
{
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	cf 93       	push	r28
 762:	8c 01       	movw	r16, r24
	u8 i = 0;
	while(str[i] != '\0')
 764:	dc 01       	movw	r26, r24
 766:	8c 91       	ld	r24, X
 768:	88 23       	and	r24, r24
 76a:	99 f0       	breq	.+38     	; 0x792 <LCD_void_Send_Dynamic_String+0x36>
	}
}

void LCD_void_Send_Dynamic_String(u8 str[]) 
{
	u8 i = 0;
 76c:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_void_Send_Data(str[i]);
 76e:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 772:	8f ef       	ldi	r24, 0xFF	; 255
 774:	95 ea       	ldi	r25, 0xA5	; 165
 776:	ae e0       	ldi	r26, 0x0E	; 14
 778:	81 50       	subi	r24, 0x01	; 1
 77a:	90 40       	sbci	r25, 0x00	; 0
 77c:	a0 40       	sbci	r26, 0x00	; 0
 77e:	e1 f7       	brne	.-8      	; 0x778 <LCD_void_Send_Dynamic_String+0x1c>
 780:	00 c0       	rjmp	.+0      	; 0x782 <LCD_void_Send_Dynamic_String+0x26>
 782:	00 00       	nop
		_delay_ms(300);
		i++;
 784:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_void_Send_Dynamic_String(u8 str[]) 
{
	u8 i = 0;
	while(str[i] != '\0')
 786:	f8 01       	movw	r30, r16
 788:	ec 0f       	add	r30, r28
 78a:	f1 1d       	adc	r31, r1
 78c:	80 81       	ld	r24, Z
 78e:	88 23       	and	r24, r24
 790:	71 f7       	brne	.-36     	; 0x76e <LCD_void_Send_Dynamic_String+0x12>
	{
		LCD_void_Send_Data(str[i]);
		_delay_ms(300);
		i++;
	}
}	
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	08 95       	ret

0000079a <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_void_Send_Command(1);
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
	LCD_void_Send_Command(0x80);
 7a0:	80 e8       	ldi	r24, 0x80	; 128
 7a2:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
}
 7a6:	08 95       	ret

000007a8 <LCD_ShiftDown>:

void LCD_ShiftDown(void)
{
	LCD_void_Send_Command(0xc0);
 7a8:	80 ec       	ldi	r24, 0xC0	; 192
 7aa:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
}
 7ae:	08 95       	ret

000007b0 <LCD_ShiftRight>:

void LCD_ShiftRight(void)
{
	LCD_void_Send_Command(0b00011100);
 7b0:	8c e1       	ldi	r24, 0x1C	; 28
 7b2:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
}
 7b6:	08 95       	ret

000007b8 <LCD_ShiftLeft>:
void LCD_ShiftLeft(void)
{
	LCD_void_Send_Command(0b00011000);
 7b8:	88 e1       	ldi	r24, 0x18	; 24
 7ba:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
}
 7be:	08 95       	ret

000007c0 <LCD_void_Send_Number>:

void LCD_void_Send_Number(s8 number)
{
 7c0:	af 92       	push	r10
 7c2:	bf 92       	push	r11
 7c4:	cf 92       	push	r12
 7c6:	df 92       	push	r13
 7c8:	ef 92       	push	r14
 7ca:	ff 92       	push	r15
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	38 2f       	mov	r19, r24
		for(u8 i = 0; i != counterc ; i++)
		{
			sendDigit(str[i]);
		}
	}
}
 7da:	ad b6       	in	r10, 0x3d	; 61
 7dc:	be b6       	in	r11, 0x3e	; 62
	LCD_void_Send_Command(0b00011000);
}

void LCD_void_Send_Number(s8 number)
{
	if (number == 0)
 7de:	88 23       	and	r24, r24
 7e0:	21 f4       	brne	.+8      	; 0x7ea <LCD_void_Send_Number+0x2a>
	{
		sendDigit(number);
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	0e 94 1c 03 	call	0x638	; 0x638 <sendDigit>
 7e8:	78 c0       	rjmp	.+240    	; 0x8da <__stack+0x7b>
	}
	else if(number > 0)
 7ea:	18 16       	cp	r1, r24
 7ec:	ac f5       	brge	.+106    	; 0x858 <LCD_void_Send_Number+0x98>
 7ee:	20 e0       	ldi	r18, 0x00	; 0
	{
		u8 counter = 0;
		s8 copy = number;
		while(copy != 0)
		{
			copy /= 10;
 7f0:	4a e0       	ldi	r20, 0x0A	; 10
 7f2:	64 2f       	mov	r22, r20
 7f4:	0e 94 99 04 	call	0x932	; 0x932 <__divmodqi4>
			counter++;
 7f8:	2f 5f       	subi	r18, 0xFF	; 255
	}
	else if(number > 0)
	{
		u8 counter = 0;
		s8 copy = number;
		while(copy != 0)
 7fa:	88 23       	and	r24, r24
 7fc:	d1 f7       	brne	.-12     	; 0x7f2 <LCD_void_Send_Number+0x32>
		{
			copy /= 10;
			counter++;
 7fe:	02 2f       	mov	r16, r18
	}
	else if(number > 0)
	{
		u8 counter = 0;
		s8 copy = number;
		while(copy != 0)
 800:	dd b6       	in	r13, 0x3d	; 61
 802:	ce b6       	in	r12, 0x3e	; 62
		{
			copy /= 10;
			counter++;
		}
		u8 counterc = counter;
		u8 str[counter];
 804:	8d b7       	in	r24, 0x3d	; 61
 806:	9e b7       	in	r25, 0x3e	; 62
 808:	82 1b       	sub	r24, r18
 80a:	91 09       	sbc	r25, r1
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	9e bf       	out	0x3e, r25	; 62
 812:	0f be       	out	0x3f, r0	; 63
 814:	8d bf       	out	0x3d, r24	; 61
 816:	ed b6       	in	r14, 0x3d	; 61
 818:	fe b6       	in	r15, 0x3e	; 62
 81a:	08 94       	sec
 81c:	e1 1c       	adc	r14, r1
 81e:	f1 1c       	adc	r15, r1
		while(counter > 0)
 820:	22 23       	and	r18, r18
 822:	b9 f0       	breq	.+46     	; 0x852 <LCD_void_Send_Number+0x92>
		{
			str[counter - 1] = (number % 10);
 824:	4a e0       	ldi	r20, 0x0A	; 10
 826:	f7 01       	movw	r30, r14
 828:	e2 0f       	add	r30, r18
 82a:	f1 1d       	adc	r31, r1
 82c:	31 97       	sbiw	r30, 0x01	; 1
 82e:	83 2f       	mov	r24, r19
 830:	64 2f       	mov	r22, r20
 832:	0e 94 99 04 	call	0x932	; 0x932 <__divmodqi4>
 836:	90 83       	st	Z, r25
			counter--;
 838:	21 50       	subi	r18, 0x01	; 1
			number /= 10;
 83a:	38 2f       	mov	r19, r24
			copy /= 10;
			counter++;
		}
		u8 counterc = counter;
		u8 str[counter];
		while(counter > 0)
 83c:	a1 f7       	brne	.-24     	; 0x826 <LCD_void_Send_Number+0x66>
 83e:	10 e0       	ldi	r17, 0x00	; 0
			number /= 10;
			
		}
		for(u8 i = 0; i != counterc ; i++)
		{
			sendDigit(str[i]);
 840:	f7 01       	movw	r30, r14
 842:	e1 0f       	add	r30, r17
 844:	f1 1d       	adc	r31, r1
 846:	80 81       	ld	r24, Z
 848:	0e 94 1c 03 	call	0x638	; 0x638 <sendDigit>
			str[counter - 1] = (number % 10);
			counter--;
			number /= 10;
			
		}
		for(u8 i = 0; i != counterc ; i++)
 84c:	1f 5f       	subi	r17, 0xFF	; 255
 84e:	10 17       	cp	r17, r16
 850:	b9 f7       	brne	.-18     	; 0x840 <LCD_void_Send_Number+0x80>
 852:	dd be       	out	0x3d, r13	; 61
 854:	ce be       	out	0x3e, r12	; 62
 856:	41 c0       	rjmp	.+130    	; 0x8da <__stack+0x7b>
			sendDigit(str[i]);
		}
	}
	else
	{
		number = number * -1;
 858:	31 95       	neg	r19
		u8 counter = 0;
		s8 copy = number;
		while(copy != 0)
 85a:	c9 f1       	breq	.+114    	; 0x8ce <__stack+0x6f>
	}
	else
	{
		number = number * -1;
		u8 counter = 0;
		s8 copy = number;
 85c:	83 2f       	mov	r24, r19
		}
	}
	else
	{
		number = number * -1;
		u8 counter = 0;
 85e:	20 e0       	ldi	r18, 0x00	; 0
		s8 copy = number;
		while(copy != 0)
		{
			copy /= 10;
 860:	4a e0       	ldi	r20, 0x0A	; 10
 862:	64 2f       	mov	r22, r20
 864:	0e 94 99 04 	call	0x932	; 0x932 <__divmodqi4>
			counter++;
 868:	2f 5f       	subi	r18, 0xFF	; 255
	else
	{
		number = number * -1;
		u8 counter = 0;
		s8 copy = number;
		while(copy != 0)
 86a:	88 23       	and	r24, r24
 86c:	d1 f7       	brne	.-12     	; 0x862 <__stack+0x3>
		{
			copy /= 10;
			counter++;
 86e:	02 2f       	mov	r16, r18
	else
	{
		number = number * -1;
		u8 counter = 0;
		s8 copy = number;
		while(copy != 0)
 870:	cd b6       	in	r12, 0x3d	; 61
 872:	de b6       	in	r13, 0x3e	; 62
		{
			copy /= 10;
			counter++;
		}
		u8 counterc = counter;
		u8 str[counter];
 874:	8d b7       	in	r24, 0x3d	; 61
 876:	9e b7       	in	r25, 0x3e	; 62
 878:	82 1b       	sub	r24, r18
 87a:	91 09       	sbc	r25, r1
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	f8 94       	cli
 880:	9e bf       	out	0x3e, r25	; 62
 882:	0f be       	out	0x3f, r0	; 63
 884:	8d bf       	out	0x3d, r24	; 61
 886:	ed b6       	in	r14, 0x3d	; 61
 888:	fe b6       	in	r15, 0x3e	; 62
 88a:	08 94       	sec
 88c:	e1 1c       	adc	r14, r1
 88e:	f1 1c       	adc	r15, r1
		while(counter != 0)
 890:	22 23       	and	r18, r18
 892:	f9 f0       	breq	.+62     	; 0x8d2 <__stack+0x73>
		{
			str[counter - 1] = (number % 10);
 894:	4a e0       	ldi	r20, 0x0A	; 10
 896:	f7 01       	movw	r30, r14
 898:	e2 0f       	add	r30, r18
 89a:	f1 1d       	adc	r31, r1
 89c:	31 97       	sbiw	r30, 0x01	; 1
 89e:	83 2f       	mov	r24, r19
 8a0:	64 2f       	mov	r22, r20
 8a2:	0e 94 99 04 	call	0x932	; 0x932 <__divmodqi4>
 8a6:	90 83       	st	Z, r25
			counter--;
 8a8:	21 50       	subi	r18, 0x01	; 1
			number /= 10;
 8aa:	38 2f       	mov	r19, r24
			copy /= 10;
			counter++;
		}
		u8 counterc = counter;
		u8 str[counter];
		while(counter != 0)
 8ac:	a1 f7       	brne	.-24     	; 0x896 <__stack+0x37>
		{
			str[counter - 1] = (number % 10);
			counter--;
			number /= 10;
		}
		LCD_void_Send_Data('-');
 8ae:	8d e2       	ldi	r24, 0x2D	; 45
 8b0:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
		for(u8 i = 0; i != counterc ; i++)
 8b4:	10 e0       	ldi	r17, 0x00	; 0
		{
			sendDigit(str[i]);
 8b6:	f7 01       	movw	r30, r14
 8b8:	e1 0f       	add	r30, r17
 8ba:	f1 1d       	adc	r31, r1
 8bc:	80 81       	ld	r24, Z
 8be:	0e 94 1c 03 	call	0x638	; 0x638 <sendDigit>
			str[counter - 1] = (number % 10);
			counter--;
			number /= 10;
		}
		LCD_void_Send_Data('-');
		for(u8 i = 0; i != counterc ; i++)
 8c2:	1f 5f       	subi	r17, 0xFF	; 255
 8c4:	01 17       	cp	r16, r17
 8c6:	b9 f7       	brne	.-18     	; 0x8b6 <__stack+0x57>
 8c8:	cd be       	out	0x3d, r12	; 61
 8ca:	de be       	out	0x3e, r13	; 62
 8cc:	06 c0       	rjmp	.+12     	; 0x8da <__stack+0x7b>
		{
			sendDigit(str[i]);
		}
	}
}
 8ce:	cd b6       	in	r12, 0x3d	; 61
 8d0:	de b6       	in	r13, 0x3e	; 62
		{
			str[counter - 1] = (number % 10);
			counter--;
			number /= 10;
		}
		LCD_void_Send_Data('-');
 8d2:	8d e2       	ldi	r24, 0x2D	; 45
 8d4:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 8d8:	f7 cf       	rjmp	.-18     	; 0x8c8 <__stack+0x69>
		for(u8 i = 0; i != counterc ; i++)
		{
			sendDigit(str[i]);
		}
	}
}
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	f8 94       	cli
 8de:	be be       	out	0x3e, r11	; 62
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	ad be       	out	0x3d, r10	; 61
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	1f 91       	pop	r17
 8ea:	0f 91       	pop	r16
 8ec:	ff 90       	pop	r15
 8ee:	ef 90       	pop	r14
 8f0:	df 90       	pop	r13
 8f2:	cf 90       	pop	r12
 8f4:	bf 90       	pop	r11
 8f6:	af 90       	pop	r10
 8f8:	08 95       	ret

000008fa <LCD_void_Send_Custom_Char>:

void LCD_void_Send_Custom_Char(u8* str, u8 location)
{
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	08 2f       	mov	r16, r24
 904:	19 2f       	mov	r17, r25
	if(location < 8)
 906:	68 30       	cpi	r22, 0x08	; 8
 908:	78 f4       	brcc	.+30     	; 0x928 <LCD_void_Send_Custom_Char+0x2e>
	{
		u8 i = 0;
		LCD_void_Send_Command(0x40 + (8 * location));
 90a:	86 2f       	mov	r24, r22
 90c:	88 0f       	add	r24, r24
 90e:	88 0f       	add	r24, r24
 910:	88 0f       	add	r24, r24
 912:	80 5c       	subi	r24, 0xC0	; 192
 914:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_void_Send_Command>
 918:	c0 2f       	mov	r28, r16
 91a:	d1 2f       	mov	r29, r17
 91c:	18 e0       	ldi	r17, 0x08	; 8
		for(i = 0; i < 8; i++)
		{
			LCD_void_Send_Data(str[i]);
 91e:	89 91       	ld	r24, Y+
 920:	0e 94 02 03 	call	0x604	; 0x604 <LCD_void_Send_Data>
 924:	11 50       	subi	r17, 0x01	; 1
{
	if(location < 8)
	{
		u8 i = 0;
		LCD_void_Send_Command(0x40 + (8 * location));
		for(i = 0; i < 8; i++)
 926:	d9 f7       	brne	.-10     	; 0x91e <LCD_void_Send_Custom_Char+0x24>
		{
			LCD_void_Send_Data(str[i]);
		}
	}
	
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	08 95       	ret

00000932 <__divmodqi4>:
 932:	87 fb       	bst	r24, 7
 934:	08 2e       	mov	r0, r24
 936:	06 26       	eor	r0, r22
 938:	87 fd       	sbrc	r24, 7
 93a:	81 95       	neg	r24
 93c:	67 fd       	sbrc	r22, 7
 93e:	61 95       	neg	r22
 940:	05 d0       	rcall	.+10     	; 0x94c <__udivmodqi4>
 942:	0e f4       	brtc	.+2      	; 0x946 <__divmodqi4_1>
 944:	91 95       	neg	r25

00000946 <__divmodqi4_1>:
 946:	07 fc       	sbrc	r0, 7
 948:	81 95       	neg	r24

0000094a <__divmodqi4_exit>:
 94a:	08 95       	ret

0000094c <__udivmodqi4>:
 94c:	99 1b       	sub	r25, r25
 94e:	79 e0       	ldi	r23, 0x09	; 9
 950:	04 c0       	rjmp	.+8      	; 0x95a <__udivmodqi4_ep>

00000952 <__udivmodqi4_loop>:
 952:	99 1f       	adc	r25, r25
 954:	96 17       	cp	r25, r22
 956:	08 f0       	brcs	.+2      	; 0x95a <__udivmodqi4_ep>
 958:	96 1b       	sub	r25, r22

0000095a <__udivmodqi4_ep>:
 95a:	88 1f       	adc	r24, r24
 95c:	7a 95       	dec	r23
 95e:	c9 f7       	brne	.-14     	; 0x952 <__udivmodqi4_loop>
 960:	80 95       	com	r24
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
